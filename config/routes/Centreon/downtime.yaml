monitoring.downtime.addHostDowntimes:
    methods: POST
    path: /monitoring/hosts/downtimes
    controller: 'Centreon\Application\Controller\DowntimeController::addHostDowntimes'
    condition: "request.attributes.get('version.is_beta') == true"

monitoring.downtime.addServiceDowntimes:
    methods: POST
    path: /monitoring/services/downtimes
    controller: 'Centreon\Application\Controller\DowntimeController::addServiceDowntimes'
    condition: "request.attributes.get('version.is_beta') == true"

monitoring.downtime.addHostDowntime:
    methods: POST
    path: /monitoring/hosts/{hostId}/downtimes
    controller: 'Centreon\Application\Controller\DowntimeController::addHostDowntime'
    condition: "request.attributes.get('version.is_beta') == true"

monitoring.downtime.addServiceDowntime:
    methods: POST
    path: /monitoring/hosts/{hostId}/services/{serviceId}/downtimes
    controller: 'Centreon\Application\Controller\DowntimeController::addServiceDowntime'
    condition: "request.attributes.get('version.is_beta') == true"

monitoring.downtime.addMetaServiceDowntime:
    methods: POST
    path: /monitoring/metaservices/{metaId}/downtimes
    requirements:
        metaId: '\d+'
    controller: 'Centreon\Application\Controller\DowntimeController::addMetaServiceDowntime'
    condition: "request.attributes.get('version') >= 2.1"

monitoring.downtime.findHostDowntimes:
    methods: GET
    path: /monitoring/hosts/downtimes
    controller: 'Centreon\Application\Controller\DowntimeController::findHostDowntimes'
    condition: "request.attributes.get('version.is_beta') == true"

monitoring.downtime.findServiceDowntimes:
    methods: GET
    path: /monitoring/services/downtimes
    controller: 'Centreon\Application\Controller\DowntimeController::findServiceDowntimes'
    condition: "request.attributes.get('version.is_beta') == true"

monitoring.downtime.findDowntimesByService:
    methods: GET
    path: /monitoring/hosts/{hostId}/services/{serviceId}/downtimes
    requirements:
        hostId: '\d+'
    controller: 'Centreon\Application\Controller\DowntimeController::findDowntimesByService'
    condition: "request.attributes.get('version.is_beta') == true"

monitoring.downtime.findDowntimesByMetaService:
    methods: GET
    path: /monitoring/metaservices/{metaId}/downtimes
    requirements:
        metaId: '\d+'
    controller: 'Centreon\Application\Controller\DowntimeController::findDowntimesByMetaService'
    condition: "request.attributes.get('version') >= 2.1"

monitoring.downtime.findOneDowntime:
    methods: GET
    path: /monitoring/downtimes/{downtimeId}
    requirements:
        downtimeId: '\d+'
    controller: 'Centreon\Application\Controller\DowntimeController::findOneDowntime'
    condition: "request.attributes.get('version.is_beta') == true"

monitoring.downtime.findDowntimes:
    methods: GET
    path: /monitoring/downtimes
    controller: 'Centreon\Application\Controller\DowntimeController::findDowntimes'
    condition: "request.attributes.get('version.is_beta') == true"

monitoring.downtime.findDowntimesByHost:
    methods: GET
    path: /monitoring/hosts/{hostId}/downtimes
    requirements:
        hostId: '\d+'
    controller: 'Centreon\Application\Controller\DowntimeController::findDowntimesByHost'
    condition: "request.attributes.get('version.is_beta') == true"

monitoring.downtime.cancelOneDowntime:
    methods: DELETE
    path: /monitoring/downtimes/{downtimeId}
    requirements:
        downtimeId: '\d+'
    controller: 'Centreon\Application\Controller\DowntimeController::cancelOneDowntime'
    condition: "request.attributes.get('version.is_beta') == true"

centreon_application_monitoring_resources_downtime:
    methods: POST
    path: /monitoring/resources/downtime
    controller: 'Centreon\Application\Controller\DowntimeController::massDowntimeResources'
    condition: "request.attributes.get('version') >= 2.0"
