openapi: 3.0.1
info:
  title: Centreon Web RestAPI
  description: |
    # New features
    + Added real-time monitoring for hosts and services
    + Added acknowledgment for hosts and services
    + Added downtimes for hosts and services
    + Added the list of monitoring server configurations
    + Added the proxy configuration
    # Information
    All dates are in **ISO 8601** format
    # Authentication
    There are two modes of authentication:
    * By token: after identification with your login credentials
    * By cookie: by reusing a valid session ID
  x-logo:
    url: ./centreon-logo.png
  contact:
    url: 'https://www.centreon.com'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: "2.0.0"
externalDocs:
  description: You can contact us on our community Slack
  url: 'https://centreon.slack.com/messages/CCRGLQSE5'
servers:
  - url: '{protocol}://{server}:{port}/centreon/api/{version}'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
        description: "HTTP schema"
      server:
        default: localhost
        description: "IP address or hostname of Centreon server"
      port:
        default: '80'
        description: "Port used by HTTP server"
      version:
        enum:
          - latest
          - beta
          - v2
        default: beta
        description: "Version of the API"
tags:
  - name: Authentication
    description: "Login and logout endpoints to retrieve authentication token"
  - name: Monitoring Server
    description: |
      This API allow to:
      * Show the monitoring server configurations
  - name: Proxy
    description: |
      This API allow to:
      * Show the default proxy configuration of Centreon
      * Update the default proxy configuration of Centreon
  - name: Acknowledgment
    description: |
      This API allow to:
      * Show the latest acknowledgment for host or service
      * Acknowledge a host or a service
      * Cancel an acknowledgment of host or service
  - name: Downtime
    description: |
      This API allow to:
      * Show hosts and services downtimes
      * Add a downtime on host or service
      * Cancel a downtime of host or service
  - name: Monitoring
    description: "Real-time monitoring of the services and hosts"
security:
  - Token: []
  - Cookie: []
paths:
  /login:
    post:
      tags:
        - Authentication
      summary: "Login"
      description: "Entry point to retrieve an authentication token."
      requestBody:
        description: "Authentication schema"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginAuthenticationResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /logout:
    get:
      tags:
        - Authentication
      summary: "Logout"
      description: "Entry point to delete an existing authentication token."
      security:
        - Token: []
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutAuthenticationResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
  /acknowledgments/hosts:
    get:
      tags:
        - Acknowledgment
      summary: "List the latest acknowledgment of each host"
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Acknowledgment.Host'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Acknowledgment
      summary: "Add an acknowledgment on host"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Acknowledgment.Host.Add'
      responses:
        '204':
          description: "Command Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /acknowledgments/hosts/{host_id}:
    delete:
      tags:
        - Acknowledgment
      summary: "Cancel an acknowledgment on host"
      parameters:
        - name: host_id
          in: path
          description: "ID of the host for which you want to cancel acknowledgment"
          required: true
          schema:
            type: integer
            format: int64
            example: 12
      responses:
        '204':
          description: "Command Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /acknowledgments/services:
    get:
      tags:
        - Acknowledgment
      summary: "List the latest acknowledgment of each service"
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Acknowledgment.Service'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Acknowledgment
      summary: "Add an acknowledgment on service"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Acknowledgment.Service.Add'
      responses:
        '204':
          description: "Command Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /acknowledgments/hosts/{host_id}/services/{service_id}:
    delete:
      tags:
        - Acknowledgment
      summary: "Cancel an acknowledgment on service"
      parameters:
        - name: host_id
          in: path
          description: "ID of the host linked to the service"
          required: true
          schema:
            type: integer
            format: int64
            example: 12
        - name: service_id
          in: path
          description: "ID of the service for which you want to cancel acknowledgment"
          required: true
          schema:
            type: integer
            format: int64
            example: 5
      responses:
        '204':
          description: "Command Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /configuration/monitoring-servers:
    get:
      tags:
        - Monitoring Server
      summary: "List all monitoring server configurations"
      description: |
        List all monitoring server configurations

        The available parameters to **search** / **sort_by** are:

          * id
          * name
          * is_localhost
          * address
          * is_activate
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Configuration.MonitoringServerMain'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /configuration/proxy:
    get:
      tags:
        - Proxy
      summary: "Display the default configuration of the Centreon proxy"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration.Proxy'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Proxy
      summary: "Update the default configuration of the Centreon proxy"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Configuration.Proxy'
      responses:
        '204':
          description: Command Sent
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/downtimes:
    get:
      tags:
        - Downtime
      summary: "List all hosts downtimes"
      description: |
        List all downtimes of hosts

        The available parameters to **search** / **sort_by** are:

          * id
          * entry_time
          * is_cancelled
          * comment
          * deletion_time
          * duration
          * end_time
          * is_fixed
          * start_time
          * host.id
          * host.name
          * host.alias
          * host.address
          * host.display_name
          * host.state
          * poller.id
          * contact.id
          * contact.name
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Downtime.Host'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/downtimes:
    get:
      tags:
        - Downtime
      summary: "List all downtimes of one host"
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/search'
        - name: show_services
          in: query
          description: |
            Indicates whether we need to display the host-related services downtimes or not (by default: **false**)
          schema:
            type: boolean
            example: true
        - name: host_id
          in: path
          description: "ID of the host"
          required: true
          schema:
            type: integer
            format: int64
            example: 12
      description: |
        List all downtimes of one host

        The available parameters to **search** / **sort_by** are:

          * id
          * entry_time
          * is_cancelled
          * comment
          * deletion_time
          * duration
          * end_time
          * is_fixed
          * start_time
          * contact.id
          * contact.name

        By default, the host-related **services** downtimes are not displayed.
        To display them, set the URI parameter "show_services" to `true`.
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Downtime.Host'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Downtime
      summary: "Add a downtime of one host"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Downtime.Host.Add'
      parameters:
        - name: host_id
          in: path
          description: "ID of the host"
          required: true
          schema:
            type: integer
            format: int64
            example: 12
      responses:
        '204':
          description: "Command Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/services/downtimes:
    get:
      tags:
        - Downtime
      summary: "List all services downtimes"
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/search'
      description: |
        List all downtimes of services

        The available parameters to **search** / **sort_by** are:

          * id
          * entry_time
          * is_cancelled
          * comment
          * deletion_time
          * duration
          * end_time
          * is_fixed
          * start_time
          * host.id
          * host.name
          * host.alias
          * host.address
          * host.display_name
          * host.state
          * poller.id
          * contact.id
          * contact.name
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Downtime.Service'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/services/{service_id}/downtimes:
    get:
      tags:
        - Downtime
      summary: "List all downtimes of one host-related service"
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/search'
        - name: host_id
          in: path
          description: "ID of the host"
          required: true
          schema:
            type: integer
            format: int64
            example: 12
        - name: service_id
          in: path
          description: "ID of the service linked to the host"
          required: true
          schema:
            type: integer
            format: int64
            example: 5
      description: |
        List all downtimes of one host-related service

        The available parameters to **search** / **sort_by** are:

          * id
          * entry_time
          * is_cancelled
          * comment
          * deletion_time
          * duration
          * end_time
          * is_fixed
          * start_time
          * contact.id
          * contact.name
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Downtime.Service'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Downtime
      summary: "Add a downtime of one host-related service"
      parameters:
        - name: host_id
          in: path
          description: "ID of the host"
          required: true
          schema:
            type: integer
            format: int64
            example: 12
        - name: service_id
          in: path
          description: "ID of the service linked to the host"
          required: true
          schema:
            type: integer
            format: int64
            example: 5
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Downtime.Service.Add'
      responses:
        '204':
          description: "Command Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/downtimes:
    get:
      tags:
        - Downtime
      summary: "List all downtimes"
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/search'
      description: |
        List all downtimes

        The available parameters to **search** / **sort_by** are:

          * id
          * entry_time
          * is_cancelled
          * comment
          * deletion_time
          * duration
          * end_time
          * is_fixed
          * start_time
          * host.id
          * host.name
          * host.alias
          * host.address
          * host.display_name
          * host.state
          * poller.id
          * contact.id
          * contact.name
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Downtime.Service'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/downtimes/{downtime_id}:
    get:
      tags:
        - Downtime
      summary: "Display one downtime"
      parameters:
        - name: downtime_id
          in: path
          description: "ID of the downtime"
          required: true
          schema:
            type: integer
            format: int64
            example: 329
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Downtime.Service'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Downtime
      summary: "Cancel a downtime"
      parameters:
        - name: downtime_id
          in: path
          description: "ID of the downtime"
          required: true
          schema:
            type: integer
            format: int64
            example: 329
      responses:
        '204':
          description: "Command Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hostgroups:
    get:
      tags:
        - Monitoring
      summary: "List all services grouped by host groups"
      description: |
        Returns all services grouped by host groups.

        The available parameters to **search** / **sort_by** are:

        * host.id
        * host.name
        * host.alias
        * host.address
        * host.state
        * poller.id
        * service.display_name
        * host_group.id

        # Information
        By default, the **hosts** property of hostgroup object is not displayed.
        To display it, set the URI parameter "show_host" to `true`.

        `/monitoring/hostgroups?show_host=true`

        By default, the **services** property of host object is not displayed.
        To display it, set the URI parameter "show_service" to `true`.

        `/monitoring/hostgroups?show_service=true`
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/search'
        - name: show_service
          in: query
          description: |
            Allows to display services belonging to hosts belonging to requested hostgroups (by default: **false**)
          schema:
            type: boolean
            example: true
        - name: show_host
          in: query
          description: |
            Allows to display hosts belonging to hostgroups (by default: **false**)
          schema:
            type: boolean
            example: true
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Monitoring.HostGroup'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts:
    get:
      tags:
        - Monitoring
      summary: "List all hosts"
      description: |
        Returns all hosts.

        The available parameters to **search** / **sort_by** are:

        * host.id
        * host.name
        * host.alias
        * host.address
        * host.state
        * poller.id
        * service.display_name
        * host_group.id

        # Information
        By default, the **services** property of host object is not displayed.
        To display it, set the URI parameter "show_service" to `true`.

        `/monitoring/hosts?show_service=true`
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/search'
        - name: show_service
          in: query
          description: |
            Allows to display services belonging to hosts (by default: **false**)
          schema:
            type: boolean
            example: true
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Monitoring.HostMain'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}:
    get:
      tags:
        - Monitoring
      summary: "Find host by ID"
      description: |
        Retuns a single host with full details and some details about its services
      parameters:
        - name: host_id
          in: path
          description: "ID of the host"
          required: true
          schema:
            type: integer
            format: int64
            example: 12
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitoring.HostFull'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/services:
    get:
      tags:
        - Monitoring
      summary: "Find host-related services"
      description: |
        Returns all services associated with a host.

        The available parameters to **search** / **sort_by** are:

        * service.id
        * service.description
        * service.display_name
        * service_group.id
        * service.is_acknowledged
        * service.state
      parameters:
        - name: host_id
          in: path
          description: "ID of the host for which we want to get its associated services"
          required: true
          schema:
            type: integer
            format: int64
            example: 12
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Monitoring.ServiceMain'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/services/{service_id}:
    get:
      tags:
        - Monitoring
      summary: "Find service by ID related to a host"
      description: "Retuns a single host with full details"
      parameters:
        - name: host_id
          in: path
          description: "ID of the host to which service is associated"
          required: true
          schema:
            type: integer
            format: int64
            example: 12
        - name: service_id
          in: path
          description: "ID of the service"
          required: true
          schema:
            type: integer
            format: int64
            example: 5
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitoring.ServiceFull'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/servicegroups:
    get:
      tags:
        - Monitoring
      summary: "List all services grouped by service groups"
      description: |
        Returns all services grouped by service groups.

        The available parameters to **search** / **sort_by** are:

        * host.id
        * host.name
        * host.alias
        * host.address
        * host.state
        * poller.id
        * service.display_name
        * service_group.id
        * service_group.name

        # Information
        By default, the **hosts** property of service group object is not displayed.
        To display it, set the URI parameter "show_host" to `true`.

        `/monitoring/hostgroups?show_host=true`

        By default, the **services** property of host object is not displayed.
        To display it, set the URI parameter "show_service" to `true`.

        `/monitoring/hostgroups?show_service=true`
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/search'
        - name: show_service
          in: query
          description: |
            Allows to display services belonging to servicegroups (by default: **false**)
          schema:
            type: boolean
            example: true
        - name: show_host
          in: query
          description: |
            Allows to display hosts related to services belonging to servicegroups (by default: **false**)
          schema:
            type: boolean
            example: true
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Monitoring.ServiceGroup'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/services:
    get:
      tags:
        - Monitoring
      summary: "List all services"
      description: |
        Returns all services.


        The available parameters to **search** / **sort_by** are:

        * host.id
        * host.name
        * host.alias
        * host.address
        * host.state
        * host_group.id
        * service.display_name
        * service.description
        * service.is_acknowledged
        * service.output
        * service.state
        * service_group.id
        * poller.id
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Monitoring.ServiceMain'
                        - $ref: '#/components/schemas/Monitoring.ServiceWithHost'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  responses:
    Unauthorized:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    Forbidden:
      description: "Forbidden"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int64
                example: "403"
              message:
                type: string
                example: "You are not authorized to access this resource"
    NotFound:
      description: "Not Found"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    InternalServerError:
      description: "Internal Server Error"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int64
                example: 500
              message:
                type: string
                example: "Internal Server Error"
  parameters:
    limit:
      in: query
      name: limit
      required: false
      description: "Max items per pages"
      schema:
        $ref: '#/components/schemas/RequestParameters.limit'
    page:
      in: query
      name: page
      required: false
      description: "Number of the page requested"
      schema:
        $ref: '#/components/schemas/RequestParameters.page'
    sortBy:
      in: query
      name: sort_by
      required: false
      description: "Used to sort the request"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestParameters.sortBy'
    search:
      in: query
      name: search
      required: false
      description: "Used to search with specifics parameters"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestParameters.search'
  schemas:
    RequestParameters.limit:
      type: integer
      minimum: 1
      example: 10
    RequestParameters.page:
      type: integer
      minimum: 1
      example: 1
    RequestParameters.sortBy:
      type: object
      example:
        host.name: ASC
    RequestParameters.search:
      type: object
      example:
        host.name: localhost
    AuthenticationRequest:
      type: object
      properties:
        security:
          type: object
          properties:
            credentials:
              type: object
              properties:
                login:
                  type: string
                  description: "Login"
                  example: "admin"
                password:
                  type: string
                  description: "Password"
                  example: "centreon"
    LoginAuthenticationResponse:
      type: object
      properties:
        contact:
          type: object
          properties:
            id:
              type: integer
              description: "Contact ID"
              example: 3
            name:
              type: string
              description: "Contact name"
              example: "Admin"
            alias:
              type: string
              description: "Contact alias"
              example: "admin"
            email:
              type: string
              format: email
              description: "Contact email"
              example: "admin@localhost"
            is_admin:
              type: boolean
              description: "Indicates whether it is an admin user or not"
              example: true
        security:
          type: object
          properties:
            token:
              type: string
              description: "Security authentication token"
              example: "9ed937d3911d212eae59300ac6977352"
    LogoutAuthenticationResponse:
      type: object
      properties:
        message:
          type: string
          example: "Successful logout"
    Meta:
      type: object
      properties:
        page:
          type: integer
          description: "Number of the pagined page"
          example: 1
        limit:
          type: integer
          description: "Number of items per page"
          example: 10
        search:
          type: object
          description: "Search parameter passed to URL"
        sort_by:
          type: object
          description: "Sort parameter passed to URL"
        total:
          type: integer
          description: "Number of items found"
          example: 1
    Configuration.MonitoringServerMain:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "ID of the server"
          example: 2
        name:
          type: string
          description: "Name of server"
          example: "Central"
        address:
          type: string
          description: "IP address of server"
          example: "127.0.0.1"
        is_localhost:
          type: boolean
          description: "Indicates whether it's the localhost server"
          example: true
        is_default:
          type: boolean
          description: "Indicates whether it's the default server"
          example: true
        ssh_port:
          type: integer
          description: "SSH port of this server"
          example: 22
        last_restart:
          type: string
          format: date-time
          description: "Date of the last Engine restart request"
        engine_start_command:
          type: string
          description: "System start command for Engine"
          example: "service centengine start"
        engine_stop_command:
          type: string
          description: "System stop command for Engine"
          example: "service centengine stop"
        engine_restart_command:
          type: string
          description: "System restart command for Engine"
          example: "service centengine restart"
        engine_reload_command:
          type: string
          description: "System reload command for Engine"
          example: "service centengine reload"
        nagios_bin:
          type: string
          description: "Full path of the Engine binary"
          example: "/usr/sbin/centengine"
        nagiostats_bin:
          type: string
          description: "Full path of the Engine statistics binary"
          example: "/usr/sbin/centenginestats"
        broker_reload_command:
          type: string
          description: "System reload command for Broker"
          example: "service cbd reload"
        centreonbroker_cfg_path:
          type: string
          description: "Full path of the Broker configuration"
          example: "/etc/centreon-broker"
        centreonbroker_module_path:
          type: string
          description: "Full path of the Broker module's libraries"
          example: "/usr/share/centreon/lib/centreon-broker"
        centreonbroker_logs_path:
          type: string
          description: "Full path of the Broker logs"
          example: null
        centreonconnector_path:
          type: string
          description: "Full path of the Engine connectors"
          example: "/usr/lib64/centreon-connector"
        init_script_centreontrapd:
          type: string
          description: "System name of Centreontrapd daemon"
          example: "centreontrapd"
        snmp_trapd_path_conf:
          type: string
          description: "Full path of the Centreontrapd daemon configuration"
          example: "/etc/snmp/centreon_traps/"
        remote_id:
          type: integer
          description: "ID of the master Remote Server linked to the server"
          example: null
        remote_server_centcore_ssh_proxy:
          type: boolean
          description: "Indicates whether Remote Servers are used as SSH proxies"
          example: true
        is_updated:
          type: boolean
          description: "Indicates whether the monitoring configuration has changed since last restart"
          example: true
        is_activate:
          type: boolean
          description: "Indicates whether the server configuration is activated"
          example: true
    Acknowledgment.Host:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "ID of the acknowledgment"
          example: 34
        author_id:
          type: integer
          format: int64
          description: "ID of the contact who requested an acknowledgment"
          example: 3
        comment:
          type: string
          description: "Short description of the acknowledgment"
          example: "Acknowledged by admin"
        deletion_time:
          type: string
          format: date-time
          description: "Date of the request for cancellation of the acknowledgment (ISO8601)"
        entry_time:
          type: string
          format: date-time
          description: "Date of the request for acknowledgment (ISO8601)"
        host_id:
          type: integer
          format: int64
          description: "ID of the host"
          example: 12
        poller_id:
          type: integer
          format: int64
          description: "ID of the poller"
          example: 1
        is_notify_contacts:
          type: boolean
          description: "Indicates whether notification is sent to the contacts linked to the host or service"
          example: false
        is_persistent_comment:
          type: boolean
          description: "Indicates whether acknowledgment is maintained in the case of a restart of the scheduler"
          example: true
        is_sticky:
          type: boolean
          description: "Indicates whether acknowledgment is maintained in the case of a change of status"
          example: true
        state:
          type: integer
          description: |
            State type
             * `1` - WARNING
             * `2` - CRITICAL
             * `3` - UNKNOWN
          example: 1
    Acknowledgment.Service:
      allOf:
        - $ref: '#/components/schemas/Acknowledgment.Host'
        - type: object
          properties:
            service_id:
              type: integer
              format: int64
              description: "ID of the service"
              example: 5
    Acknowledgment.Host.Add:
      type: object
      properties:
        comment:
          type: string
          description: "Short description of the acknowledgment"
          example: "Acknowledged by admin"
        host_id:
          type: integer
          format: int64
          description: "ID of the host"
          example: 12
        is_notify_contacts:
          type: boolean
          description: "Indicates whether notification is sent to the contacts linked to the host or service"
          example: false
        is_persistent_comment:
          type: boolean
          description: "Indicates whether acknowledgment is maintained in the case of a restart of the scheduler"
          example: true
        is_sticky:
          type: boolean
          description: "Indicates whether acknowledgment is maintained in the case of a change of status"
          example: true
    Acknowledgment.Service.Add:
      allOf:
        - $ref: '#/components/schemas/Acknowledgment.Host.Add'
        - type: object
          properties:
            service_id:
              type: integer
              format: int64
              description: "ID of the service"
              example: 5
    Downtime.Host.Add:
      allOf:
        - $ref: '#/components/schemas/Downtime.Service.Add'
        - type: object
          properties:
            with_services:
              type: boolean
              description: "Indicates whether we should add the downtime on the host-related services"
              example: true
    Downtime.Service.Add:
      type: object
      properties:
        start_time:
          type: string
          format: date-time
          description: "Scheduled start date of the downtime (ISO8601)"
        end_time:
          type: string
          format: date-time
          description: "Scheduled end date of the downtime (ISO8601)"
        is_fixed:
          type: boolean
          description: "Indicates whether the downtime is fixed"
          example: true
        duration:
          type: integer
          description: "Downtime duration in seconds"
          example: 3600
        author_id:
          type: integer
          description: "ID of the contact who requested the downtime"
          example: 3
        comment:
          type: string
          description: "Comment of the downtime"
          example: "Downtime set by admin"
    Downtime.Host:
      type: object
      properties:
        id:
          type: integer
          description: "ID of the downtime"
          example: 329
        author_id:
          type: integer
          description: "ID of the contact who requested the downtime"
          example: 3
        host_id:
          type: integer
          description: "ID of the host on which the downtime is set"
          example: 12
        comment:
          type: string
          description: "Comment of the downtime"
          example: "Downtime set by admin"
        duration:
          type: integer
          description: "Downtime duration in seconds"
          example: 7200
        entry_time:
          type: string
          format: date-time
          description: "Date of the request to create the downtime (ISO8601)"
        start_time:
          type: string
          format: date-time
          description: "Scheduled start date of the downtime (ISO8601)"
        end_time:
          type: string
          format: date-time
          description: "Scheduled end date of the downtime (ISO8601)"
        deletion_time:
          type: string
          format: date-time
          description: "Date of cancellation of downtime (ISO8601)"
          example: null
        actual_start_time:
          type: string
          format: date-time
          description: "Start date of the downtime (ISO8601)"
        actual_end_time:
          type: string
          format: date-time
          description: "End date of the downtime (ISO8601)"
          example: null
        is_started:
          type: boolean
          description: "Indicates whether the downtime has started"
          example: true
        is_cancelled:
          type: boolean
          description: "Indicates whether the downtime has been cancelled"
          example: false
        is_fixed:
          type: boolean
          description: "Indicates whether the downtime is fixed"
          example: true
    Downtime.Service:
      allOf:
        - $ref: '#/components/schemas/Downtime.Host'
        - type: object
          properties:
            service_id:
              type: integer
              description: "ID of the service on which the downtime is set"
              example : 5
    Monitoring.HostGroup:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "ID of the host group"
          example: 28
        name:
          type: string
          description: "Name of the host group"
          example: "All"
        host:
          allOf:
            - $ref: '#/components/schemas/Monitoring.HostMin'
            - $ref: '#/components/schemas/Monitoring.HostWithService'
    Monitoring.HostMin:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "ID of the host"
          example: 12
        alias:
          type: string
          description: "Host alias"
          example: "Central"
        display_name:
          type: string
          description: "Host display name"
          example: "Central"
        name:
          type: string
          description: "Host name"
          example: "Central"
        state:
          type: integer
          description: |
            Host state
             * `0` - UP
             * `1` - DOWN
             * `2` - UNREACHABLE
             * `4` - PENDING
          example: 0
    Monitoring.HostFull:
      allOf:
        - $ref: '#/components/schemas/Monitoring.HostMain'
        - type: object
          properties:
            active_checks:
              type: boolean
              description: "Indicates whether active checks are enabled for the host"
              example: true
            check_command:
              type: string
              description: "Command name used for active checks"
              example: "base_host_alive"
            check_interval:
              type: number
              format: float
              description: "Interval between two checks"
              example: 5.0
            check_period:
              type: string
              description: "Name of the check period"
              example: "24x7"
            check_type:
              type: integer
              description: |
                Type of the last check
                  * `0` - Active
                  * `1` - Passive
              example: 0
            last_hard_state:
              type: string
              format: date-time
              description: "Date of the last hard state (ISO8601)"
            last_notification:
              type: string
              format: date-time
              description: "Date of the last notification (ISO8601)"
            latency:
              type: number
              format: float
              description: "Time difference between scheduled check time and actual check time"
              example: 0.005
            next_check:
              type: string
              format: date-time
              description: "Scheduled date for the next check (ISO8601)"
            next_host_notification:
              type: integer
              description: ...
            notification_interval:
              type: number
              format: float
              description: "Interval of periodic notification or `0` if its off"
              example: 30.0
            notification_number:
              type: integer
              description: "Current notification number"
              example: 3
            notify:
              type: boolean
              description: "Indicates whether notifications of the host are enabled"
              example: true
            notify_on_down:
              type: boolean
              description: "Indicates whether notifications are sent when the host is down"
              example: true
            notify_on_downtime:
              type: boolean
              description: "Indicates whether a notification is sent when the host is put in a downtime period"
              example: false
            notify_on_flapping:
              type: boolean
              description: "Indicates whether notifications are sent when the host is flapping"
              example: false
            notify_on_recovery:
              type: boolean
              description: "Indicates whether notifications are sent when the host has recovered"
              example: true
            notify_on_unreachable:
              type: boolean
              description: "Indicates whether notifications are sent when the host is unreachable"
              example: false
    Monitoring.HostMain:
      allOf:
        - $ref: '#/components/schemas/Monitoring.HostMin'
        - $ref: '#/components/schemas/Monitoring.HostWithService'
        - type: object
          properties:
            poller_id:
              type: integer
              format: int64
              description: "ID of the poller to which the host is linked"
              example: 1
            acknowledged:
              type: boolean
              description: "Indicates whether the last status was acknowledged"
              example: false
            address_ip:
              type: string
              format: ipv4
              description: "IP address of the host"
              example: "127.0.0.1"
            check_attempt:
              type: integer
              description: "Number of the current check attempt"
              example: 1
            checked:
              type: boolean
              description: "Indicates whether the host is checked"
              example: true
            execution_time:
              type: number
              format: float
              description: "Time duration to check the host"
              example: 0.070906
            icon_image:
              type: string
              description: "File of the icon used to represent this host"
              example: "ppm/operatingsystems-linux-snmp-linux-128.png"
            icon_image_alt:
              type: string
              description: "Alternative text of the icon representing the host"
              example: ""
            last_check:
              type: string
              format: date-time
              description: "Date of last check (ISO8601)"
            last_hard_state_change:
              type: string
              format: date-time
              description: "Date of the last hard state change (ISO8601)"
            last_state_change:
              type: string
              format: date-time
              description: "Date of the last state change (soft or hard) (ISO8601)"
            last_time_down:
              type: string
              format: date-time
              description: "The last time the host was DOWN (ISO8601)"
            last_time_unreachable:
              type: string
              format: date-time
              description: "The last time the host was UNREACHABLE (ISO8601)"
            last_time_up:
              type: string
              format: date-time
              description: "The last time the host was UP (ISO8601)"
            last_update:
              type: string
              format: date-time
              description: "Date of last update (ISO8601)"
            max_check_attempts:
              type: integer
              format: int64
              description: "Max check attempts for active host check (before changing the state type to HARD)"
              example: 3
            output:
              type: string
              description: "Output of the last host check"
              example: "OK - 127.0.0.1 rta 0.100ms lost 0%\n" 
            passive_checks:
              type: boolean
              description: "Indicates whether the check script is passive or not"
              example: false
            state_type:
              type: integer
              description: |
                State type
                 * `0` - SOFT
                 * `1` - HARD
              example: 0
            timezone:
              type: string
              description: Timezone used for dates
              example: ':Europe/Paris'
    Monitoring.HostWithService:
      type: object
      properties:
        services:
          type: array
          items:
            $ref: '#/components/schemas/Monitoring.ServiceMin'
    Monitoring.ServiceGroup:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "ID of the service group"
          example: 13
        name:
          type: string
          description: "Name of the service group"
          example: "MySG"
        host:
          allOf:
            - $ref: '#/components/schemas/Monitoring.HostMin'
            - $ref: '#/components/schemas/Monitoring.HostWithService'
    Monitoring.ServiceMin:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "ID of the service"
          example: 5
        description:
          type: string
          description: "Service description"
          example: "Ping"
        display_name:
          type: string
          description: "Service display name"
          example: "Ping"
        state:
          type: integer
          description: |
            The current state of the service
              * `0` - OK
              * `1` - WARNING
              * `2` - CRITICAL
              * `3` - UNKNOWN
              * `4` - PENDING
          example: 0
    Monitoring.ServiceMain:
      allOf:
        - $ref: '#/components/schemas/Monitoring.ServiceMin'
        - type: object
          properties:
            check_attempt:
              type: integer
              format: int64
              description: "Number of the current check attempt"
              example: 1
            icon_image:
              type: string
              description: "File name of the icon representing the service"
              example: ""
            icon_image_alt:
              type: string
              description: "Alternative text of the icon representing the service"
              example: ""
            last_check:
              type: string
              format: date-time
              description: "Date of last check (ISO8601)"
            last_state_change:
              type: string
              format: date-time
              description: "Date of the last state change (ISO8601)"
            max_check_attempts:
              type: integer
              description: "Max check attempts"
              example: 3
            output:
              type: string
              description: "Output of the last service check"
              example: "OK - 127.0.0.1 rta 0.025ms lost 0%\n"
            state_type:
              type: integer
              description: |
                Type of the current state
                  * `0` - SOFT
                  * `1` - HARD
              example: 1
    Monitoring.ServiceFull:
      allOf:
        - $ref: '#/components/schemas/Monitoring.ServiceMain'
        - type: object
          properties:
            check_command:
              type: string
              description: "Command name used for active checks"
              example: "base_centreon_ping"
            check_interval:
              type: number
              format: float
              description: "Interval between two scheduled checks of the service"
              example: 5.0
            check_period:
              type: string
              description: "Name of the check period"
              example: "24x7"
            check_type:
              type: integer
              description: |
                Type of the last check
                  * `0` - Active
                  * `1` - Passive
              example: 0
            command_line:
              type: string
              description: "Command used for active checks"
              example: "/usr/lib64/nagios/plugins/check_icmp -H 127.0.0.1 -n 5 -w 200,20% -c 400,50%"
            execution_time:
              type: number
              format: float
              description: "Time duration to check the service"
              example: 0.179335
            is_acknowledged:
              type: boolean
              description: "Indicates whether the last status was acknowledged"
              example: false
            is_active_check:
              type: boolean
              description: "Indicates whether active checks are enabled for the service"
              example: true
            is_checked:
              type: boolean
              description: "Indicates whether the service has been checked"
              example: true
            last_hard_state_change:
              type: string
              format: date-time
              description: "Date of the last hard state change (ISO8601)"
            last_notification:
              type: string
              format: date-time
              description: "Date of the last notification (ISO8601)"
            last_time_critical:
              type: string
              format: date-time
              description: "The last time the service was CRITICAL (ISO8601)"
            last_time_ok:
              type: string
              format: date-time
              description: "The last time the service was OK (ISO8601)"
            last_time_unknown:
              type: string
              format: date-time
              description: "The last time the service was UNKNOWN (ISO8601)"
            last_time_warning:
              type: string
              format: date-time
              description: "The last time the service was WARNING (ISO8601)"
            last_update:
              type: string
              format: date-time
              description: "Date of the last update (ISO8601)"
            latency:
              type: number
              format: float
              description: "Time difference between scheduled check time and actual check time"
              example: 0.031
            next_check:
              type: string
              format: date-time
              description: "Scheduled date for the next check (ISO8601)"
            performance_data:
              type: string
              description: "Performance data of the last check plugin"
              example: "rta=0.025ms;200.000;400.000;0; rtmax=0.061ms;;;; rtmin=0.015ms;;;; pl=0%;20;50;0;100 "
            scheduled_downtime_depth:
              type: integer
              description: "Number of scheduled downtimes the service is currently in"
              example: 0
    Monitoring.ServiceWithHost:
      type: object
      properties:
        hosts:
          $ref: '#/components/schemas/Monitoring.HostMin'
    Configuration.Proxy:
      type: object
      properties:
        url:
          type: string
          description: "URL of the proxy"
          example: "proxy.internal.company.org"
        port:
          type: integer
          description: "Port of the proxy"
          minimum: 0
          maximum: 65535
          example: 3128
        user:
          type: string
          description: "Login used to connect to proxy"
          example: "proxy-user"
        password:
          type: string
          description: "Password used to connect to proxy"
          example: "proxy-pass"
      required:
        - url
        - port
        - user
        - password
  securitySchemes:
    Token:
      description: |
        The use of the API requires a security token.

        To retrieve it, you will need to authenticate yourself with your login credentials.

        The token will be deleted if it has not been used for more than one hour.
      type: apiKey
      name: X-AUTH-TOKEN
      in: header
    Cookie:
      description: |
        If you have already connected on the Centreon web application, you can reused the PHPSESSID cookie.

        The cookie will be valid as long as the connection to Centreon is maintained.
      type: apiKey
      name: PHPSESSID
      in: cookie
