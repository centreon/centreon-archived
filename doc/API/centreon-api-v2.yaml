openapi: 3.0.1
info:
  title: Centreon Web RestAPI
  description: |
    # New features
    + Added real-time monitoring for hosts and services
    + Added acknowledgement for hosts and services
    + Added downtimes for hosts and services
    + Added the list of monitoring server configurations
    + Added the proxy configuration
    # Information
    All dates are in **ISO 8601** format
    # Authentication
    There are two modes of authentication:
    * By token: after identification with your login credentials
    * By cookie: by reusing a valid session ID
  x-logo:
    url: ./centreon-logo.png
  contact:
    url: 'https://www.centreon.com'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: "beta"
externalDocs:
  description: You can contact us on our community Slack
  url: 'https://centreon.slack.com/messages/CCRGLQSE5'
servers:
  - url: '{protocol}://{server}:{port}/centreon/api/{version}'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
        description: "HTTP schema"
      server:
        default: localhost
        description: "IP address or hostname of Centreon server"
      port:
        default: '80'
        description: "Port used by HTTP server"
      version:
        enum:
          - latest
          - beta
          - v2
        default: beta
        description: "Version of the API"
tags:
  - name: Authentication
    description: "Login and logout endpoints to retrieve authentication token"
  - name: Proxy
  - name: Monitoring Server
  - name: Host
  - name: Service
  - name: Host Group
  - name: Service Group
  - name: Acknowledgement
  - name: Downtime
  - name: Topology
security:
  - Token: []
  - Cookie: []
paths:
  /login:
    post:
      tags:
        - Authentication
      summary: "Login"
      description: "Entry point to retrieve an authentication token."
      security: []
      requestBody:
        description: "Authentication schema"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginAuthenticationResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /logout:
    get:
      tags:
        - Authentication
      summary: "Logout"
      description: "Entry point to delete an existing authentication token."
      security:
        - Token: []
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutAuthenticationResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
  /configuration/icons:
    get:
      tags:
        - Icons
      summary: "List all icons"
      description: |
        List all icons from centreon configuration.

        The available parameters to **search** / **sort_by** are:

          * id
          * name
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: "id of the icon"
                          example: 1
                        directory:
                          type: string
                          description: "directory of the icon"
                          example: "ppm"
                        name:
                          type: string
                          description: "name of the icon"
                          example: "operatingsystems-linux-snmp-linux-128.png"
                        url:
                          type: string
                          description: "url to get the icon"
                          example: "/centreon/img/media/ppm/operatingsystems-linux-snmp-linux-128.png"
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /configuration/proxy:
    get:
      tags:
        - Proxy
      summary: "Display the default configuration of the Centreon proxy"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration.Proxy'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Proxy
      summary: "Update the default configuration of the Centreon proxy"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Configuration.Proxy'
      responses:
        '204':
          description: Command Sent
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /configuration/monitoring-servers:
    get:
      tags:
        - Monitoring Server
      summary: "List all monitoring servers configurations"
      description: |
        List all monitoring servers configurations.

        The available parameters to **search** / **sort_by** are:

          * id
          * name
          * is_localhost
          * address
          * is_activate
      parameters:
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Configuration.MonitoringServerMain'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/acl/actions:
    get:
      tags:
        - User ACL actions
      summary: "List allowed actions"
      description: "List allowed actions of the current user."
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  host:
                    type: object
                    properties:
                      check:
                        type: boolean
                        description: if check is allowed on host
                        example: true
                      acknowledgement:
                        type: boolean
                        description: if acknowledgement is allowed on host
                        example: true
                      downtime:
                        type: boolean
                        description: if downtime is allowed on host
                        example: false
                  service:
                    type: object
                    properties:
                      check:
                        type: boolean
                        description: if check is allowed on service
                        example: true
                      acknowledgement:
                        type: boolean
                        description: if acknowledgement is allowed on service
                        example: true
                      downtime:
                        type: boolean
                        description: if downtime is allowed on service
                        example: false
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/filters/{page_name}:
    get:
      tags:
        - User filters
      summary: "List user filters by page"
      description: |
        `internal`

        `Since Centreon web 20.04.6`

        List user filters saved for a given page.
      parameters:
        - $ref: '#/components/parameters/FilterPageName'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/User.Filter'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - User filters
      summary: "Add user filter"
      description: |
        `internal`

        `Since Centreon web 20.04.6`

        Add user filter for a given page.
      parameters:
        - $ref: '#/components/parameters/FilterPageName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: filter name
                  example: my filter 1
                criterias:
                  type: array
                  description: list of filter criterias
                  items:
                    type: object
                    example:
                      type: text
                      name: field1
                      value: search value 1
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User.Filter'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/filters/{page_name}/{filter_id}:
    get:
      tags:
        - User filters
      summary: "Detailed user filter"
      description: |
        `internal`

        `Since Centreon web 20.04.6`

        Get detailed information of a user filter for a given page.
      parameters:
        - $ref: '#/components/parameters/FilterPageName'
        - $ref: '#/components/parameters/FilterId'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User.Filter'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - User filters
      summary: "Update user filter"
      description: |
        `internal`

        `Since Centreon web 20.04.6`

        Update user filter for a given page.
      parameters:
        - $ref: '#/components/parameters/FilterPageName'
        - $ref: '#/components/parameters/FilterId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User.Filter'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User.Filter'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - User filters
      summary: "Patch user filter"
      description: |
        `internal`

        `Since Centreon web 20.04.6`

        Patch user filter order for a given page.
      parameters:
        - $ref: '#/components/parameters/FilterPageName'
        - $ref: '#/components/parameters/FilterId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [order]
              properties:
                order:
                  type: integer
                  description: filter order
                  example: 1
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User.Filter'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - User filters
      summary: "Delete user filter"
      description: |
        `internal`

        `Since Centreon web 20.04.6`

        Delete user filter for a given page.
      parameters:
        - $ref: '#/components/parameters/FilterPageName'
        - $ref: '#/components/parameters/FilterId'
      responses:
        '204':
          description: "OK"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/resources:
    get:
      tags:
        - Resource
      summary: "List all resources including hosts and services"
      description: |
        List all the resources in real-time monitoring : hosts and services.

        The available parameters to **search** / **sort_by** are:

        * id
        * name
        * alias
        * fqdn
        * type
        * status_code
        * status
        * action_url
        * parent_name
        * parent_status
        * severity_level
        * in_downtime
        * acknowledged
        * last_status_change
        * tries
        * last_check
        * information

        Only for **searching**:

        ---

        * h.group
        * h.group.id
        * h.name
        * h.alias
        * h.address
        * h.fqdn
        * s.description
        * s.group
        * s.group.id
      parameters:
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/ResourceFilterType'
        - $ref: '#/components/parameters/ResourceFilterState'
        - $ref: '#/components/parameters/ResourceFilterStatus'
        - $ref: '#/components/parameters/ResourceFilterHostgroupId'
        - $ref: '#/components/parameters/ResourceFilterServicegroupId'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Monitoring.ResourceMain'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/resources/hosts/{host_id}:
    get:
      tags:
        - Resource
      summary: "Get information on host resources"
      description: "Return a single host with full details of its resources status."
      parameters:
        - $ref: '#/components/parameters/HostId'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitoring.ResourceFull'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/resources/hosts/{host_id}/services/{service_id}:
    get:
      tags:
        - Resource
      summary: "Get information on service resource"
      description: "Return a single service with full details as resource."
      parameters:
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/ServiceId'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitoring.ResourceFull'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts:
    get:
      tags:
        - Host
      summary: "List all hosts"
      description: |
        List all the hosts in real-time monitoring.

        The available parameters to **search** / **sort_by** are:

        * host.id
        * host.name
        * host.alias
        * host.address
        * host.state
        * poller.id
        * service.display_name
        * host_group.id
        * host.is_acknowledged
        * host.downtime
        * host.criticality
      parameters:
        - $ref: '#/components/parameters/ShowService'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Monitoring.HostMain'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}:
    get:
      tags:
        - Host
      summary: "Get a host"
      description: "Return a single host with full details and some details about its services."
      parameters:
        - $ref: '#/components/parameters/HostId'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitoring.HostFull'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/services:
    get:
      tags:
        - Service
      summary: "List all services"
      description: |
        List all the services in real-time monitoring.

        The available parameters to **search** / **sort_by** are:

        * host.id
        * host.name
        * host.alias
        * host.address
        * host.state
        * host_group.id
        * service.display_name
        * service.description
        * service.is_acknowledged
        * service.output
        * service.state
        * service_group.id
        * poller.id
        * service.downtime
        * service.criticality
      parameters:
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Monitoring.ServiceMain'
                        - $ref: '#/components/schemas/Monitoring.ServiceWithHost'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/services:
    get:
      tags:
        - Service
      summary: "List services related to a host"
      description: |
        List all services related to a host in real-time monitoring.

        The available parameters to **search** / **sort_by** are:

        * service.id
        * service.description
        * service.display_name
        * service_group.id
        * service.is_acknowledged
        * service.state
      parameters:
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Monitoring.ServiceMain'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/services/{service_id}:
    get:
      tags:
        - Service
      summary: "Get a service"
      description: "Return a single service with full details."
      parameters:
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/ServiceId'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitoring.ServiceFull'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/services/{service_id}/servicegroups:
    get:
      tags:
        - Service Group
      summary: "Get service groups by host id and service id"
      description: "Return a list of service groups for host-service pair."
      parameters:
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/ServiceId'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitoring.ServiceGroup'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/hostgroups:
    get:
      tags:
        - Host Group
      summary: "List all host groups by host id"
      description: |
        List all the host groups in real-time monitoring by host id
      parameters:
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Monitoring.HostGroup'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hostgroups:
    get:
      tags:
        - Host Group
      summary: "List all host groups"
      description: |
        List all the host groups in real-time monitoring.

        The available parameters to **search** / **sort_by** are:

        * host.id
        * host.name
        * host.alias
        * host.address
        * host.state
        * poller.id
        * service.display_name
        * host_group.id
      parameters:
        - $ref: '#/components/parameters/ShowHost'
        - $ref: '#/components/parameters/ShowService'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Monitoring.HostGroup'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/servicegroups:
    get:
      tags:
        - Service Group
      summary: "List all service groups"
      description: |
        List all the service groups in real-time monitoring.

        The available parameters to **search** / **sort_by** are:

        * id
        * name
      parameters:
        - $ref: '#/components/parameters/ShowService'
        - $ref: '#/components/parameters/ShowHost'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Monitoring.ServiceGroup'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/acknowledgements:
    get:
      tags:
        - Acknowledgement
      summary: "List all acknowledgements"
      parameters:
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Acknowledgement.Host'
                        - $ref: '#/components/schemas/Acknowledgement.Service'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/resources/acknowledgements:
    delete:
      tags:
        - Acknowledgement
      summary: "Massively disacknowledge resources"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Acknowledgement.Disacknowledge.Bulk'
      responses:
        '204':
          description: "OK"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/acknowledgements/{acknowledgement_id}:
    get:
      tags:
        - Acknowledgement
      summary: "Display one acknowledgement"
      description: "Display one acknowledgement."
      parameters:
        - $ref: '#/components/parameters/AcknowledgementId'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Acknowledgement.Service'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/acknowledgements:
    get:
      tags:
        - Acknowledgement
      summary: "List all hosts acknowledgements"
      parameters:
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Acknowledgement.Host'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Acknowledgement
      summary: "Add an acknowledgement on multiple hosts"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Acknowledgement.Hosts.Add'
      responses:
        '204':
          description: "Commands Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/services/acknowledgements:
    get:
      tags:
        - Acknowledgement
      summary: "List all services acknowledgements"
      parameters:
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Acknowledgement.Service'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Acknowledgement
      summary: "Add an acknowledgement on multiple services"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Acknowledgement.Services.Add'
      responses:
        '204':
          description: "Commands Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/acknowledgements:
    get:
      tags:
        - Acknowledgement
      summary: "List all acknowledgements of a host"
      parameters:
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/HostId'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Acknowledgement.Host'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Acknowledgement
      summary: "Add an acknowledgement on chosen host"
      parameters:
        - $ref: '#/components/parameters/HostId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Acknowledgement.Host.Add'
      responses:
        '204':
          description: "Command Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Acknowledgement
      summary: "Cancel an acknowledgement on a host"
      parameters:
        - $ref: '#/components/parameters/HostId'
      responses:
        '204':
          description: "Command Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/services/{service_id}/acknowledgements:
    get:
      tags:
        - Acknowledgement
      summary: "List all acknowledgements of a service"
      parameters:
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/ServiceId'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Acknowledgement.Service'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Acknowledgement
      summary: "Add an acknowledgement on chosen service"
      parameters:
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/ServiceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Acknowledgement.Service.Add'
      responses:
        '204':
          description: "Command Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Acknowledgement
      summary: "Cancel an acknowledgement on a service"
      parameters:
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/ServiceId'
      responses:
        '204':
          description: "Command Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/downtimes:
    get:
      tags:
        - Downtime
      summary: "List all downtimes"
      parameters:
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      description: |
        List all downtimes

        The available parameters to **search** / **sort_by** are:

          * id
          * entry_time
          * is_cancelled
          * comment
          * deletion_time
          * duration
          * end_time
          * is_fixed
          * start_time
          * host.id
          * host.name
          * host.alias
          * host.address
          * host.display_name
          * host.state
          * poller.id
          * contact.id
          * contact.name
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Downtime.Service'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/downtimes/{downtime_id}:
    get:
      tags:
        - Downtime
      summary: "Display one downtime"
      description: "Display one downtime."
      parameters:
        - $ref: '#/components/parameters/DowntimeId'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Downtime.Service'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Downtime
      summary: "Cancel a downtime"
      description: "Cancel a downtime."
      parameters:
        - $ref: '#/components/parameters/DowntimeId'
      responses:
        '204':
          description: "Command Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/downtimes:
    get:
      tags:
        - Downtime
      summary: "List all hosts downtimes"
      description: |
        List all downtimes of hosts

        The available parameters to **search** / **sort_by** are:

          * id
          * entry_time
          * is_cancelled
          * comment
          * deletion_time
          * duration
          * end_time
          * is_fixed
          * start_time
          * host.id
          * host.name
          * host.alias
          * host.address
          * host.display_name
          * host.state
          * poller.id
          * contact.id
          * contact.name
      parameters:
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Downtime.Host'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Downtime
      summary: "Add an downtime on multiple hosts"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Downtime.Hosts.Add'
      responses:
        '204':
          description: "Commands Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/services/downtimes:
    get:
      tags:
        - Downtime
      summary: "List all services downtimes"
      parameters:
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      description: |
        List all downtimes of services

        The available parameters to **search** / **sort_by** are:

          * id
          * entry_time
          * is_cancelled
          * comment
          * deletion_time
          * duration
          * end_time
          * is_fixed
          * start_time
          * host.id
          * host.name
          * host.alias
          * host.address
          * host.display_name
          * host.state
          * poller.id
          * contact.id
          * contact.name
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Downtime.Service'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Downtime
      summary: "Add an downtime on multiple services"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Downtime.Services.Add'
      responses:
        '204':
          description: "Commands Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/downtimes:
    get:
      tags:
        - Downtime
      summary: "List all downtimes of a host"
      parameters:
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/ShowService'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      description: |
        List all downtimes of a host.

        The available parameters to **search** / **sort_by** are:

          * id
          * entry_time
          * is_cancelled
          * comment
          * deletion_time
          * duration
          * end_time
          * is_fixed
          * start_time
          * contact.id
          * contact.name
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Downtime.Host'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Downtime
      summary: "Add a downtime on a host"
      description: "Add a downtime on a host."
      parameters:
        - $ref: '#/components/parameters/HostId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Downtime.Host.Add'
      responses:
        '204':
          description: "Command Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/services/{service_id}/downtimes:
    get:
      tags:
        - Downtime
      summary: "List all downtimes of a service"
      parameters:
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/ServiceId'
      description: |
        List all downtimes of a service.

        The available parameters to **search** / **sort_by** are:

          * id
          * entry_time
          * is_cancelled
          * comment
          * deletion_time
          * duration
          * end_time
          * is_fixed
          * start_time
          * contact.id
          * contact.name
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Downtime.Service'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Downtime
      summary: "Add a downtime on a service"
      description: "Add a downtime on a service."
      parameters:
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/ServiceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Downtime.Service.Add'
      responses:
        '204':
          description: "Command Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/check:
    post:
      tags:
        - Check
      summary: "Check multiple hosts"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Check.Hosts'
      responses:
        '204':
          description: "Commands Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/services/check:
    post:
      tags:
        - Check
      summary: "Check multiple services"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Check.Services'
      responses:
        '204':
          description: "Commands Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/check:
    post:
      tags:
        - Check
      summary: "Check host"
      description: "Schedule immediate check on chosen host"
      parameters:
        - $ref: '#/components/parameters/HostId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Check.Host'
      responses:
        '204':
          description: 'Command Sent'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: 'Host not found'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/services/{service_id}/check:
    post:
      tags:
        - Check
      summary: "Check service"
      description: "Schedule immediate check on chosen service"
      parameters:
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/ServiceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Check.Service'
      responses:
        '204':
          description: 'Command Sent'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: 'Host or service not found'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/resources/check:
    post:
      tags:
        - Check
      summary: "Check resources"
      description: "Schedule immediate check on chosen resources"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Check.Resources'
      responses:
        '204':
          description: 'Command Sent'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: 'Host or service not found'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/submit:
    post:
      tags:
        - Submit
      summary: "Submit a result to a single host"
      description: "Submit a result (check status, output and perfdata) to a single host"
      parameters:
        - $ref: '#/components/parameters/HostId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitResult.Host'
      responses:
        '204':
          description: 'Command Sent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: 'Host not found'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/services/{service_id}/submit:
    post:
      tags:
        - Submit
      summary: "Submit a result to a single service"
      description: "Submit a result (check status, output and perfdata) to a single service"
      parameters:
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/ServiceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitResult.Service'
      responses:
        '204':
          description: 'Command Sent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: 'Host or service not found'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/resources/submit:
    post:
      tags:
        - Submit
      summary: "Submit result to resources"
      description: "Submit a result (check status, output and perfdata) to resources"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitResult.Resources'
      responses:
        '204':
          description: 'Command Sent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: 'Host or service not found'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/services/{service_id}/metrics/start/{start}/end/{end}:
    get:
      tags:
        - Metrics
      summary: 'Get service metrics'
      parameters:
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/MetricStartDate'
        - $ref: '#/components/parameters/MetricEndDate'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  global:
                    type: object
                    properties:
                      title:
                        type: string
                        description: title of the graph
                        example: graph title
                      start:
                        type: integer
                        description: timestamp of the start interval
                        example: 1594504800
                      end:
                        type: integer
                        description: timestamp of the end interval
                        example: 1594591200
                      vertical-label:
                        type: string
                        description: vertical label (should not be used cause multiple y-axis possible)
                        example: "Value"
                      base:
                        type: string
                        description: base scale
                        example: '1024'
                      width:
                        type: string
                        description: width of the graph (should not be used)
                        example: '550'
                      height:
                        type: string
                        description: height of the graph (should not be used)
                        example: '140'
                      lower-limit:
                        type: string
                        description: lower value of the graph
                        example: '0'
                      scaled:
                        type: integer
                        description: if the graph needs to be automatically scaled
                        example: 1
                      multiple_services:
                        type: boolean
                        description: if multiple services are selected (always false)
                        example: false
                  metrics:
                    type: array
                    items:
                      type: object
                      properties:
                        index_id:
                          type: string
                          description: index id in centreon_storage.index_data table
                          example: '4'
                        metric_id:
                          type: string
                          description: metric id in centreon_storage.metrics table
                          example: '29'
                        metric:
                          type: string
                          description: name of the metric
                          example: 'cpu'
                        metric_legend:
                          type: string
                          description: name of the metric in legend
                          example: 'cpu'
                        unit:
                          type: string
                          description: metric unit
                          example: '%'
                        hidden:
                          type: integer
                          description: if the metric is hidden
                          example: 0
                        min:
                          type: string
                          description: min value
                          example: '0'
                        max:
                          type: string
                          description: max value
                          example: '100'
                        virtual:
                          type: integer
                          description: if the metric is virtual
                          example: 0
                        ds_data:
                          type: object
                          description: metric line properties
                          properties:
                            ds_min:
                              type: string
                              description: minimum value
                              example: '1'
                            ds_max:
                              type: string
                              description: maximum value
                              example: '1'
                            ds_minmax_int:
                              type: string
                              nullable: true
                              description: unknown
                              example: null
                            ds_last:
                              type: string
                              description: last value
                              example: '1'
                            ds_average:
                              type: string
                              description: average value
                              example: '1'
                            ds_total:
                              type: string
                              nullable: true
                              description: unknown
                              example: null
                            ds_tickness:
                              type: string
                              description: unknown
                              example: '1'
                            ds_color_line_mode:
                              type: string
                              description: unknown
                              example: '1'
                            ds_color_line:
                              type: string
                              description: color of the line
                              example: '#666600'
                        legend:
                          type: string
                          description: metric name in legend
                          example: 'cpu (%)'
                        stack:
                          type: integer
                          description: if the metric is stacked with other metrics
                          example: 0
                        warn:
                          type: string
                          nullable: true
                          description: warning threshold
                          example: null
                        warn_low:
                          type: string
                          nullable: true
                          description: low warning threshold
                          example: null
                        crit:
                          type: string
                          nullable: true
                          description: critical threshold
                          example: null
                        crit_low:
                          type: string
                          nullable: true
                          description: low critical threshold
                          example: null
                        ds_color_area_warn:
                          type: string
                          description: color of the area under warning threshold
                          example: '#ff9a13'
                        ds_color_area_crit:
                          type: string
                          description: color of the area under critical threshold
                          example: '#e00b3d'
                        ds_order:
                          type: integer
                          description: order used for stacking
                          example: 0
                        data:
                          type: array
                          items:
                            type: number
                            description: value of the metric
                          example:
                            - 1.0
                            - null
                            - 1.0
                        prints:
                          type: array
                          items:
                            type: array
                            items:
                              type: string
                              description: label to display in legend
                              example: 'Last:1.00'
                        minimum_value:
                          type: number
                          description: minimum value
                          example: 1.0
                        maximum_value:
                          type: number
                          description: maximum value
                          example: 1.0
                  times:
                    type: array
                    items:
                      type: string
                      format: timestamp
                      description: timestamp of the tick
                    example:
                      - '1594505100'
                      - '1594505400'
                      - '1594505700'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundHostOrService'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/services/{service_id}/status/start/{start}/end/{end}:
    get:
      tags:
        - Metrics
      summary: 'Get service status data'
      parameters:
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/MetricStartDate'
        - $ref: '#/components/parameters/MetricEndDate'
      description: 'Get status data from a service between given interval'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  critical:
                    type: array
                    items:
                      type: object
                      properties:
                        start:
                          type: string
                          description: start time (timestamp)
                          example: "1581987121"
                        end:
                          type: string
                          description: end time (timestamp)
                          example: "1581987181"
                  warning:
                    type: array
                    items:
                      type: object
                      properties:
                        start:
                          type: string
                          description: start time (timestamp)
                          example: "1581987121"
                        end:
                          type: string
                          description: end time (timestamp)
                          example: "1581987181"
                  ok:
                    type: array
                    items:
                      type: object
                      properties:
                        start:
                          type: string
                          description: start time (timestamp)
                          example: "1581987121"
                        end:
                          type: string
                          description: end time (timestamp)
                          example: "1581987181"
                  unknown:
                    type: array
                    items:
                      type: object
                      properties:
                        start:
                          type: string
                          description: start time (timestamp)
                          example: "1581987121"
                        end:
                          type: string
                          description: end time (timestamp)
                          example: "1581987181"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundHostOrService'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/services/{service_id}/metrics/performance:
    get:
      tags:
        - Metrics
      summary: 'Get service performance data'
      parameters:
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/ServiceId'
        - in: query
          name: start
          required: false
          description: "Start date of metrics (default date is 24 hours in the past)"
          schema:
            type: string
            format: date-time
            example: '2020-02-18T00:00:00'
        - in: query
          name: end
          required: false
          description: "End date of metrics (default date is current date)"
          schema:
            type: string
            format: date-time
            example: '2020-02-19T00:00:00'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  global:
                    type: object
                    properties:
                      title:
                        type: string
                        description: title of the graph
                        example: 'graph title'
                      start:
                        type: string
                        format: date-time
                        description: datetime of the start interval
                        example: '2020-02-18T00:00:00'
                      end:
                        type: string
                        format: date-time
                        description: datetime of the end interval
                        example: '2020-02-19T00:00:00'
                      vertical-label:
                        type: string
                        description: vertical label (should not be used cause multiple y-axis possible)
                        example: 'Value'
                      base:
                        type: string
                        description: base scale
                        example: '1024'
                      width:
                        type: string
                        description: width of the graph (should not be used)
                        example: '550'
                      height:
                        type: string
                        description: height of the graph (should not be used)
                        example: '140'
                      lower-limit:
                        type: string
                        description: lower value of the graph
                        example: '0'
                      scaled:
                        type: integer
                        description: if the graph needs to be automatically scaled
                        example: 1
                      multiple_services:
                        type: boolean
                        description: if multiple services are selected (always false)
                        example: false
                  metrics:
                    type: array
                    items:
                      type: object
                      properties:
                        index_id:
                          type: string
                          description: index id in centreon_storage.index_data table
                          example: '4'
                        metric_id:
                          type: string
                          description: metric id in centreon_storage.metrics table
                          example: '29'
                        metric:
                          type: string
                          description: name of the metric
                          example: 'cpu'
                        metric_legend:
                          type: string
                          description: name of the metric in legend
                          example: 'cpu'
                        unit:
                          type: string
                          description: metric unit
                          example: '%'
                        hidden:
                          type: integer
                          description: if the metric is hidden
                          example: 0
                        min:
                          type: string
                          description: min value
                          example: '0'
                        max:
                          type: string
                          description: max value
                          example: '100'
                        virtual:
                          type: integer
                          description: if the metric is virtual
                          example: 0
                        ds_data:
                          type: object
                          description: metric line properties
                          properties:
                            ds_min:
                              type: string
                              description: minimum value
                              example: '1'
                            ds_max:
                              type: string
                              description: maximum value
                              example: '1'
                            ds_minmax_int:
                              type: string
                              nullable: true
                              description: unknown
                              example: null
                            ds_last:
                              type: string
                              description: last value
                              example: '1'
                            ds_average:
                              type: string
                              description: average value
                              example: '1'
                            ds_total:
                              type: string
                              nullable: true
                              description: unknown
                              example: null
                            ds_tickness:
                              type: string
                              description: unknown
                              example: '1'
                            ds_color_line_mode:
                              type: string
                              description: unknown
                              example: '1'
                            ds_color_line:
                              type: string
                              description: color of the line
                              example: '#666600'
                        legend:
                          type: string
                          description: metric name in legend
                          example: 'cpu (%)'
                        stack:
                          type: integer
                          description: if the metric is stacked with other metrics
                          example: 0
                        warn:
                          type: string
                          nullable: true
                          description: warning threshold
                          example: null
                        warn_low:
                          type: string
                          nullable: true
                          description: low warning threshold
                          example: null
                        crit:
                          type: string
                          nullable: true
                          description: critical threshold
                          example: null
                        crit_low:
                          type: string
                          nullable: true
                          description: low critical threshold
                          example: null
                        ds_color_area_warn:
                          type: string
                          description: color of the area under warning threshold
                          example: '#ff9a13'
                        ds_color_area_crit:
                          type: string
                          description: color of the area under critical threshold
                          example: '#e00b3d'
                        ds_order:
                          type: integer
                          description: order used for stacking
                          example: 0
                        data:
                          type: array
                          items:
                            type: number
                            format: float
                            description: value of the metric
                          example:
                            - 1.0
                            - null
                            - 1.0
                        prints:
                          type: array
                          items:
                            type: array
                            items:
                              type: string
                              description: label to display in legend
                              example: 'Last:1.00'
                        minimum_value:
                          type: number
                          format: float
                          description: minimum value
                          example: 1.0
                        maximum_value:
                          type: number
                          format: float
                          description: maximum value
                          example: 1.0
                  times:
                    type: array
                    items:
                      type: string
                      format: date-time
                      description: datetime of the tick
                    example:
                      - '2020-02-19T00:00:00'
                      - '2020-02-19T00:05:00'
                      - '2020-02-19T00:10:00'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundHostOrService'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/services/{service_id}/metrics/status:
    get:
      tags:
        - Metrics
      summary: 'Get service status data'
      parameters:
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/ServiceId'
        - in: query
          name: start
          required: false
          description: "Start date of metrics (default date is 24 hours in the past)"
          schema:
            type: string
            format: date-time
            example: '2020-02-18T00:00:00'
        - in: query
          name: end
          required: false
          description: "End date of metrics (default date is current date)"
          schema:
            type: string
            format: date-time
            example: '2020-02-19T00:00:00'
      description: 'Get status data from a service between given interval'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  critical:
                    type: array
                    items:
                      type: object
                      properties:
                        start:
                          type: string
                          description: start time (timestamp)
                          example: '1581987121'
                        end:
                          type: string
                          description: end time (timestamp)
                          example: '1581987181'
                  warning:
                    type: array
                    items:
                      type: object
                      properties:
                        start:
                          type: string
                          description: start time (timestamp)
                          example: '1581987121'
                        end:
                          type: string
                          description: end time (timestamp)
                          example: '1581987181'
                  ok:
                    type: array
                    items:
                      type: object
                      properties:
                        start:
                          type: string
                          description: start time (timestamp)
                          example: '1581987121'
                        end:
                          type: string
                          description: end time (timestamp)
                          example: '1581987181'
                  unknown:
                    type: array
                    items:
                      type: object
                      properties:
                        start:
                          type: string
                          description: start time (timestamp)
                          example: '1581987121'
                        end:
                          type: string
                          description: end time (timestamp)
                          example: '1581987181'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundHostOrService'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/timeline:
    get:
      tags:
        - Timeline
      summary: "Get host timeline"
      description: |
        List all events for a given host

        The available parameters to **search** / **sort_by** are:

        * type
        * content
        * date
      parameters:
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Monitoring.TimelineEvent'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/hosts/{host_id}/services/{service_id}/timeline:
    get:
      tags:
        - Timeline
      summary: "Get service timeline"
      description: |
        List all events for a given service

        The available parameters to **search** / **sort_by** are:

        * type
        * content
        * date
      parameters:
        - $ref: '#/components/parameters/HostId'
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Monitoring.TimelineEvent'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/resources/acknowledge:
    post:
      tags:
        - Acknowledgement
      summary: "Acknowledge multiple resources"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Acknowledgement.Bulk'
      responses:
        '204':
          description: "Command Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /monitoring/resources/downtime:
    post:
      tags:
        - Downtime
      summary: "Set downtime for multiple resources"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Downtime.Bulk'
      responses:
        '204':
          description: "Command Sent"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /platform/topology:
    post:
      tags:
        - Topology
      summary: "Register to platform topology"
      description: "Register a server to the platform topology"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topology.Register'
      responses:
        '201':
          description: "OK"
        '409':
          description: "Conflict. More details are specified in the response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int64
                    example: 409
                  message:
                    type: string
                    example: "A platform using the name : 'myPoller' or address : '1.1.1.2' already exists"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - Topology
      summary: "Get a platform topology"
      description: "Get a platform topology in Json Graph Format"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                required: ["graph", "nodes", "edges"]
                properties:
                  graph:
                    type: object
                    description: General informations about schema
                    properties:
                      label:
                        type: string
                        description: type of Json Graph
                        example: "centreon-topology"
                      metadata:
                        type: object
                        properties:
                          version:
                            type: string
                            description: Version of the topology
                            example: "1.0.0"
                      nodes:
                        type: object
                        minItems: 1
                        properties:
                          id:
                            properties:
                              type:
                                type: string
                                description: Server Type of a platform
                                example: "central"
                              label:
                                type: string
                                description: logical name of a platform
                                example: "Central"
                              metadata:
                                type: object
                                properties:
                                  centreon-id:
                                    type: string
                                    description: id of a platform as known in centreon database
                                    example: "1"
                                  hostname:
                                    type: string
                                    description: physical name of a platform
                                    example: "localhost.localdomain"
                      edges:
                        type: array
                        minItems: 0
                        items:
                          type: object
                          properties:
                            source:
                              type: string
                              description: children platform id as known in the topology
                              example: "91"
                            relation:
                              type: string
                              description: broker communication type
                              example: "peer_retention"
                            target:
                              type: string
                              description: parent platform id as known in the topology
                              example: "1"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /gorgone/pollers/{poller_id}/responses/{token}:
    get:
      tags:
        - Gorgone
      parameters:
        - $ref: '#/components/parameters/PollerId'
        - $ref: '#/components/parameters/GorgoneToken'
      responses:
        '200':
            description: "OK"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Gorgone.Response'
                  type: object
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /gorgone/pollers/{poller_id}/commands/{command_name}:
    post:
      tags:
        - Gorgone
      parameters:
        - $ref: '#/components/parameters/PollerId'
        - $ref: '#/components/parameters/CommandName'
      responses:
        '200':
            description: "OK"
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    token:
                      type: string
                      description: "Token used to retrieve the data linked to the command"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    Token:
      description: |
        The use of the API requires a security token.

        To retrieve it, you will need to authenticate yourself with your login credentials.

        The token will be deleted if it has not been used for more than one hour.
      type: apiKey
      name: X-AUTH-TOKEN
      in: header
    Cookie:
      description: |
        If you have already connected on the Centreon web application, you can reused the PHPSESSID cookie.
        The cookie will be valid as long as the connection to Centreon is maintained.
      type: apiKey
      name: PHPSESSID
      in: cookie
  parameters:
    Search:
      in: query
      name: search
      required: false
      schema:
        type: string
      description: >
        Retrieve only data matching the defined search value.

        Simple search can be done like the following example:
        ```
        search={"host.name":"Central"}
        ```

        Complex search can be done with aggregators and operators.

        Available search aggregators are:
          * `$or`
          * `$and`

        Available search operators are:
          * `$eq` → equal
          * `$neq` → not equal
          * `$lt` → less than
          * `$le` → less or equal than
          * `$gt` → greater than
          * `$ge` → greater or equal than
          * `$lk` → like
          * `$nk` → not like
          * `$in` → in
          * `$ni` → not in

        Examples without nested aggregators:
          ```
          search={
            "$or":[
              {"host.name":{"$eq":"name_1"}},
              {"host.name":{"$eq":"name_2"}}
            ]
          }
          ```
          ```
          search={
            "$and":[
              {"host.address":{"$rg":"^10\.0\.0\.\d+$"}},
              {"host.name":{"$lk":"fr%"}}
            ]
          }
          ```

        Example with nested aggregators:
          ```
          search={
            "$or":[
              {
                "$and":[
                  {"host.address":{"$rg":"^10\.0\.0\.\d+$"}},
                  {"host.name":{"$lk":"fr%"}}
                ]
              },
              {
                "$and":[
                  {"host.address":{"$rg":"^192\.168\.0\.\d+$"}},
                  {"host.name":{"$lk":"us%"}}
                ]
              }
            ]
          }
          ```
    Limit:
      in: query
      name: limit
      required: false
      description: "Number of items per pages"
      schema:
        type: integer
        minimum: 1
        default: 10
        example: 20
    Page:
      in: query
      name: page
      required: false
      description: "Number of the requested page"
      schema:
        type: integer
        minimum: 1
        default: 1
        example: 4
    SortBy:
      in: query
      name: sort_by
      required: false
      description: "Sort the resulted data by its properties"
      schema:
        type: object
        example: '{"host.name":"ASC"}'
    MetricStartDate:
      in: path
      name: start
      required: true
      description: "Start date of metrics (default date is 24 hours in the past)"
      schema:
        type: string
        format: date-time
        example: '2020-02-18T00:00:00'
    MetricEndDate:
      in: path
      name: end
      required: true
      description: "End date of metrics (default date is current date)"
      schema:
        type: string
        format: date-time
        example: '2020-02-19T00:00:00'
    ResourceFilterType:
      in: query
      name: types
      required: false
      description: "Filter the resources by type"
      schema:
        type: array
        items:
          type: string
          enum: [service, host]
        example: '["host"]'
    ResourceFilterState:
      in: query
      name: states
      required: false
      description: "Filter the resources by state"
      schema:
        type: array
        items:
          type: string
          enum: [unhandled_problems, resources_problems, in_downtime, acknowledged, all]
        example: '["in_downtime", "acknowledged"]'
    ResourceFilterStatus:
      in: query
      name: statuses
      required: false
      description: "Filter the resources by status"
      schema:
        type: array
        items:
          type: string
          enum: [OK, UP, WARNING, DOWN, CRITICAL, UNREACHABLE, UNKNOWN, PENDING]
        example: '["OK", "UP", "PENDING"]'
    ResourceFilterHostgroupId:
      in: query
      name: hostgroup_ids
      required: false
      description: "Filter the resources by host group ID"
      schema:
        type: array
        items:
          type: integer
          format: int64
        example: '[13, 22, 31]'
    ResourceFilterServicegroupId:
      in: query
      name: servicegroup_ids
      required: false
      description: "Filter the resources by service group ID"
      schema:
        type: array
        items:
          type: integer
          format: int64
        example: '[2033]'
    ShowHost:
      in: query
      name: show_host
      description: "Allows to display hosts belonging to items"
      schema:
        type: boolean
        default: false
        example: true
    ShowService:
      in: query
      name: show_service
      description: "Allows to display services belonging to items"
      schema:
        type: boolean
        default: false
        example: true
    HostId:
      in: path
      name: host_id
      description: "ID of the host"
      required: true
      schema:
        type: integer
        format: int64
        example: 12
    ServiceId:
      in: path
      name: service_id
      description: "ID of the service"
      required: true
      schema:
        type: integer
        format: int64
        example: 5
    AcknowledgementId:
      in: path
      name: acknowledgement_id
      description: "ID of the acknowledgement"
      required: true
      schema:
        type: integer
        format: int64
        example: 227
    DowntimeId:
      in: path
      name: downtime_id
      description: "ID of the downtime"
      required: true
      schema:
        type: integer
        format: int64
        example: 329
    FilterPageName:
      in: path
      name: page_name
      description: "name of the page"
      required: true
      schema:
        type: string
        example: events-view
    FilterId:
      in: path
      name: filter_id
      description: "id of the filter"
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    PollerId:
      in: path
      name: poller_id
      description: "ID of the poller"
      required: true
      schema:
        type: integer
        format: int64
        example: 5
    GorgoneToken:
      in: path
      name: token
      description: "Gorgone Token"
      required: true
      schema:
        type: string
    CommandName:
      in: path
      name: command_name
      description: "Gorgone Command"
      required: true
      schema:
        type: string
  responses:
    Unauthorized:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int64
                example: 401
              message:
                type: string
    Forbidden:
      description: "Forbidden"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int64
                example: 403
              message:
                type: string
                example: "You are not authorized to access this resource"
    NotFound:
      description: "Not Found"
    NotFoundHostOrService:
      description: "Host or service not found"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int64
                example: 404
              message:
                type: string
                example: "Host 12 not found"
    InternalServerError:
      description: "Internal Server Error"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int64
                example: 500
              message:
                type: string
                example: "Internal Server Error"
  schemas:
    AuthenticationRequest:
      type: object
      properties:
        security:
          type: object
          properties:
            credentials:
              type: object
              properties:
                login:
                  type: string
                  description: "Login"
                  example: "admin"
                password:
                  type: string
                  description: "Password"
                  example: "centreon"
    LoginAuthenticationResponse:
      type: object
      properties:
        contact:
          type: object
          properties:
            id:
              type: integer
              description: "Contact ID"
              example: 3
            name:
              type: string
              description: "Contact name"
              example: "Admin"
            alias:
              type: string
              description: "Contact alias"
              example: "admin"
            email:
              type: string
              format: email
              description: "Contact email"
              example: "admin@localhost"
            is_admin:
              type: boolean
              description: "Indicates whether it is an admin user or not"
              example: true
        security:
          type: object
          properties:
            token:
              type: string
              description: "Security authentication token"
              example: "9ed937d3911d212eae59300ac6977352"
    LogoutAuthenticationResponse:
      type: object
      properties:
        message:
          type: string
          example: "Successful logout"
    Meta:
      type: object
      properties:
        page:
          type: integer
          description: "Number of the pagined page"
          example: 1
        limit:
          type: integer
          description: "Number of items per page"
          example: 10
        search:
          type: object
          description: "Search parameter passed to URL"
        sort_by:
          type: object
          description: "Sort parameter passed to URL"
        total:
          type: integer
          description: "Number of items found"
          example: 1
    User.Filter:
      type: object
      required: [name, criterias]
      properties:
        id:
          type: integer
          description: filter id
          example: 1
        name:
          type: string
          description: filter name
          example: my filter 1
        criterias:
          type: array
          description: list of filter criterias
          items:
            type: object
            example:
              type: text
              name: field1
              value: search value 1
        order:
          type: integer
          description: filter order
          example: 1
    Configuration.MonitoringServerMain:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "ID of the server"
          example: 2
        name:
          type: string
          description: "Name of the server"
          example: "Central"
        address:
          type: string
          description: "IP address of the server"
          example: "127.0.0.1"
        is_localhost:
          type: boolean
          description: "Indicates whether it's the localhost server"
          example: true
        is_default:
          type: boolean
          description: "Indicates whether it's the default server"
          example: true
        ssh_port:
          type: integer
          description: "SSH port of the server"
          example: 22
        gorgone_communication_type:
          type: integer
          description: "Communication type used by Gorgone to communicate with the server"
          example: 1
        gorgone_port:
          type: integer
          description: "Port used by Gorgone to communicate with the server"
          example: 5556
        last_restart:
          type: string
          format: date-time
          description: "Date of the last Engine restart request"
        engine_start_command:
          type: string
          description: "System start command for Engine"
          example: "service centengine start"
        engine_stop_command:
          type: string
          description: "System stop command for Engine"
          example: "service centengine stop"
        engine_restart_command:
          type: string
          description: "System restart command for Engine"
          example: "service centengine restart"
        engine_reload_command:
          type: string
          description: "System reload command for Engine"
          example: "service centengine reload"
        nagios_bin:
          type: string
          description: "Full path of the Engine binary"
          example: "/usr/sbin/centengine"
        nagiostats_bin:
          type: string
          description: "Full path of the Engine statistics binary"
          example: "/usr/sbin/centenginestats"
        broker_reload_command:
          type: string
          description: "System reload command for Broker"
          example: "service cbd reload"
        centreonbroker_cfg_path:
          type: string
          description: "Full path of the Broker configuration"
          example: "/etc/centreon-broker"
        centreonbroker_module_path:
          type: string
          description: "Full path of the Broker module's libraries"
          example: "/usr/share/centreon/lib/centreon-broker"
        centreonbroker_logs_path:
          type: string
          description: "Full path of the Broker logs"
          example: null
        centreonconnector_path:
          type: string
          description: "Full path of the Engine connectors"
          example: "/usr/lib64/centreon-connector"
        init_script_centreontrapd:
          type: string
          description: "System name of Centreontrapd daemon"
          example: "centreontrapd"
        snmp_trapd_path_conf:
          type: string
          description: "Full path of the Centreontrapd daemon configuration"
          example: "/etc/snmp/centreon_traps/"
        remote_id:
          type: integer
          description: "ID of the master Remote Server linked to the server"
          example: null
        remote_server_use_as_proxy:
          type: boolean
          description: "Indicates whether Remote Servers are used as SSH proxies"
          example: true
        is_updated:
          type: boolean
          description: "Indicates whether the monitoring configuration has changed since last restart"
          example: true
        is_activate:
          type: boolean
          description: "Indicates whether the server configuration is activated"
          example: true
    Acknowledgement.Resource:
      type: object
      properties:
        comment:
          type: string
          description: "Short description of the acknowledgement"
          example: "Acknowledged by admin"
        with_services:
          type: boolean
          description: "Indicates whether we should acknowledge the host-related services"
          example: true
        is_notify_contacts:
          type: boolean
          description: "Indicates whether notification is sent to the contacts linked to the host or service"
          example: false
    Disacknowledgement.Resource:
      type: object
      properties:
        with_services:
          type: boolean
          description: "Indicates whether we should disacknowledge the host-related services"
          example: true
    Acknowledgement.Bulk:
      type: object
      properties:
        acknowledgement:
          $ref: '#/components/schemas/Acknowledgement.Resource'
        resources:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Monitoring.Resource.Disacknowledge.Host'
              - $ref: '#/components/schemas/Monitoring.Resource.Disacknowledge.Service'
    Acknowledgement.Disacknowledge.Bulk:
      type: object
      properties:
        disacknowledgement:
          $ref: '#/components/schemas/Disacknowledgement.Resource'
        resources:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Monitoring.Resource.Disacknowledge.Host'
              - $ref: '#/components/schemas/Monitoring.Resource.Disacknowledge.Service'
    Acknowledgement.Host:
      type: object
      nullable: true
      properties:
        id:
          type: integer
          format: int64
          description: "ID of the acknowledgement"
          example: 34
        author_id:
          type: integer
          format: int64
          description: "ID of the contact who requested an acknowledgement"
          example: 3
        author_name:
          type: string
          description: "Name of the contact who requested an acknowledgement"
          example: "admin"
        comment:
          type: string
          description: "Short description of the acknowledgement"
          example: "Acknowledged by admin"
        deletion_time:
          type: string
          format: date-time
          nullable: true
          description: "Date of the request for cancellation of the acknowledgement (ISO8601)"
        entry_time:
          type: string
          format: date-time
          description: "Date of the request for acknowledgement (ISO8601)"
        host_id:
          type: integer
          format: int64
          description: "ID of the host"
          example: 12
        poller_id:
          type: integer
          format: int64
          description: "ID of the poller"
          example: 1
        is_notify_contacts:
          type: boolean
          description: "Indicates whether notification is sent to the contacts linked to the host or service"
          example: false
        is_persistent_comment:
          type: boolean
          description: "Indicates whether acknowledgement is maintained in the case of a restart of the scheduler"
          example: true
        is_sticky:
          type: boolean
          description: "Indicates whether acknowledgement is maintained in the case of a change of status"
          example: true
        state:
          type: integer
          description: |
            State type
             * `1` - WARNING
             * `2` - CRITICAL
             * `3` - UNKNOWN
          example: 1
    Acknowledgement.Service:
      nullable: true
      allOf:
        - $ref: '#/components/schemas/Acknowledgement.Host'
        - type: object
          nullable: true
          properties:
            service_id:
              type: integer
              format: int64
              description: "ID of the service"
              example: 5
    Acknowledgement.Host.Add:
      allOf:
        - $ref: '#/components/schemas/Acknowledgement.Service.Add'
        - type: object
          properties:
            with_services:
              type: boolean
              description: "Indicates whether we should add the downtime on the host-related services"
              example: true
    Acknowledgement.Hosts.Add:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/Acknowledgement.Host.Add'
          - $ref: '#/components/schemas/Bulk.Resource.Id'
    Acknowledgement.Service.Add:
      type: object
      properties:
        comment:
          type: string
          description: "Short description of the acknowledgement"
          example: "Acknowledged by admin"
        is_notify_contacts:
          type: boolean
          description: "Indicates whether notification is sent to the contacts linked to the host or service"
          example: false
        is_persistent_comment:
          type: boolean
          description: "Indicates whether acknowledgement is maintained in the case of a restart of the scheduler"
          example: true
        is_sticky:
          type: boolean
          description: "Indicates whether acknowledgement is maintained in the case of a change of status"
          example: true
    Acknowledgement.Services.Add:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/Acknowledgement.Service.Add'
          - $ref: '#/components/schemas/Bulk.Resource.Id'
    Downtime.Host.Add:
      allOf:
        - $ref: '#/components/schemas/Downtime.Service.Add'
        - type: object
          properties:
            with_services:
              type: boolean
              description: "Indicates whether we should add the downtime on the host-related services"
              example: true
    Downtime.Hosts.Add:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/Downtime.Host.Add'
          - $ref: '#/components/schemas/Bulk.Resource.Id'
    Downtime.Service.Add:
      type: object
      properties:
        start_time:
          type: string
          format: date-time
          description: "Scheduled start date of the downtime (ISO8601)"
        end_time:
          type: string
          format: date-time
          description: "Scheduled end date of the downtime (ISO8601)"
        is_fixed:
          type: boolean
          description: "Indicates whether the downtime is fixed"
          example: true
        duration:
          type: integer
          description: "Downtime duration in seconds"
          example: 3600
        author_id:
          type: integer
          description: "ID of the contact who requested the downtime"
          example: 3
        comment:
          type: string
          description: "Comment of the downtime"
          example: "Downtime set by admin"
    Downtime.Services.Add:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/Downtime.Service.Add'
          - $ref: '#/components/schemas/Bulk.Resource.Id'
    Downtime.Host:
      type: object
      properties:
        id:
          type: integer
          description: "ID of the downtime"
          example: 329
        author_id:
          type: integer
          description: "ID of the contact who requested the downtime"
          example: 3
        author_name:
          type: string
          description: "Name of the contact who requested the downtime"
          example: "admin"
        host_id:
          type: integer
          description: "ID of the host on which the downtime is set"
          example: 12
        comment:
          type: string
          description: "Comment of the downtime"
          example: "Downtime set by admin"
        duration:
          type: integer
          description: "Downtime duration in seconds"
          example: 7200
        entry_time:
          type: string
          format: date-time
          description: "Date of the request to create the downtime (ISO8601)"
        start_time:
          type: string
          format: date-time
          description: "Scheduled start date of the downtime (ISO8601)"
        end_time:
          type: string
          format: date-time
          description: "Scheduled end date of the downtime (ISO8601)"
        deletion_time:
          type: string
          format: date-time
          nullable: true
          description: "Date of cancellation of downtime (ISO8601)"
          example: null
        actual_start_time:
          type: string
          format: date-time
          description: "Start date of the downtime (ISO8601)"
        actual_end_time:
          type: string
          format: date-time
          description: "End date of the downtime (ISO8601)"
          example: null
        is_started:
          type: boolean
          description: "Indicates whether the downtime has started"
          example: true
        is_cancelled:
          type: boolean
          description: "Indicates whether the downtime has been cancelled"
          example: false
        is_fixed:
          type: boolean
          description: "Indicates whether the downtime is fixed"
          example: true
    Downtime.Service:
      allOf:
        - $ref: '#/components/schemas/Downtime.Host'
        - type: object
          properties:
            service_id:
              type: integer
              description: "ID of the service on which the downtime is set"
              example : 5
    Downtime.Resource:
      type: object
      properties:
        comment:
          type: string
          description: "Short description of the downtime"
          example: "Downtime set by admin"
        with_services:
          type: boolean
          description: "Indicates whether we should add the downtime on the host-related services"
          example: true
        is_fixed:
          type: boolean
          description: "Indicates whether the downtime is fixed"
          example: true
        duration:
          type: integer
          description: "Downtime duration in seconds"
          example: 7200
        start_time:
          type: string
          format: date-time
          description: "Scheduled start date of the downtime (ISO8601)"
        end_time:
          type: string
          format: date-time
          description: "Scheduled end date of the downtime (ISO8601)"
    Downtime.Bulk:
      type: object
      properties:
        downtime:
          $ref: '#/components/schemas/Downtime.Resource'
        resources:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Monitoring.Resource.Disacknowledge.Host'
              - $ref: '#/components/schemas/Monitoring.Resource.Disacknowledge.Service'
    Check.Host:
      type: object
      properties:
        is_forced:
          type: boolean
          description: "Indicates whether the check is forced (do not take into account the check timeperiod)"
          example: true
    Check.Hosts:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/Check.Host'
          - $ref: '#/components/schemas/Bulk.Resource.Id'
    Check.Service:
      allOf:
        - $ref: '#/components/schemas/Check.Host'
    Check.Services:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/Check.Service'
          - $ref: '#/components/schemas/Bulk.Resource.Id'
    Check.Resources:
      type: object
      properties:
        resources:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [host, service]
                description: "Type of resource"
                example: "service"
              id:
                type: integer
                description: "Resource ID"
                example: 10
              parent:
                type: object
                nullable: true
                properties:
                  id:
                    type: integer
                    description: "Parent resource ID"
                    example: 17
    SubmitResult.Host:
      type: object
      required: [status]
      properties:
        status:
          type: integer
          enum: [0, 1, 2]
          description: |
            Host status code that can be submitted
            * `0` - UP
            * `1` - DOWN
            * `2` - UNREACHABLE
          example: 1
        output:
          type: string
          nullable: true
          description: "Output result of the check sent"
          example: "CRITICAL: Connection lost"
        performance_data:
          type: string
          nullable: true
          description: "Performance data result of the check sent"
          example: "'nbproc'=0;;1:1;0;"
    SubmitResult.Service:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [0, 1, 2, 3]
          description: |
            Service status code that can be submitted
            * `0` - OK
            * `1` - WARNING
            * `2` - CRITICAL
            * `3` - UNKNOWN
          example: 2
        output:
          type: string
          nullable: true
          description: "Output result of the check sent"
          example: "CRITICAL: Memory exceeded "
        performance_data:
          type: string
          nullable: true
          description: "Performance data result of the check sent"
          example: "'used'=453849088B;;;0;1927262208"
    SubmitResult.Resources:
      type: object
      required: [resources]
      properties:
        resources:
          type: array
          items:
            type: object
            required: [status,id]
            properties:
              type:
                type: string
                enum: [host, service]
                description: "Type of resource"
                example: "service"
              id:
                type: integer
                description: "Resource ID"
                example: 10
              parent:
                type: object
                nullable: true
                properties:
                  id:
                    type: integer
                    description: "Parent resource ID"
                    example: 17
              status:
                type: integer
                enum: [0, 1, 2, 3]
                description: |
                  Resource status code that can be submitted
                  * `0` - OK or UP
                  * `1` - WARNING or DOWN
                  * `2` - CRITICAL or UNREACHABLE
                  * `3` - UNKNOWN
                example: 2
              output:
                type: string
                nullable: true
                description: "Output result of the check sent"
                example: "CRITICAL: Memory exceeded "
              performance_data:
                type: string
                nullable: true
                description: "Performance data result of the check sent"
                example: "'used'=453849088B;;;0;1927262208"
    Monitoring.ResourceFull:
      allOf:
        - $ref: "#/components/schemas/Monitoring.ResourceMain"
      type: object
      properties:
        command_line:
          type: string
          nullable: true
          description: "Check command of the host"
          example: "/usr/lib64/nagios/plugins/check_icmp -H 127.0.0.1 -w 3000.0,80% -c 5000.0,100% -p 1"
        poller_name:
          type: string
          nullable: true
          description: "Name of the monitoring server of the host"
          example: "Central"
        timezone:
          type: string
          description: "Timezone used by the host"
          example: "Europe/Paris"
        flapping:
          type: boolean
          description: "Is host flapping"
          example: false
        percent_state_change:
          type: number
          format: float
          description: "Percent of Host state change"
          example: 20.10
        criticality:
          type: number
          nullable: true
          format: integer
          description: "Criticality level"
          example: 1
        chart_url:
          type: string
          nullable: true
          description: "Chart URL"
        last_notification:
          type: string
          nullable: true
          format: date-time
          description: "Last notification date and time in ISO format"
          example: "2020-02-18T00:00:00"
        notification_number:
          type: number
          nullable: true
          format: integer
          description: "Number of notifications"
          example: 3
        next_check:
          type: string
          nullable: true
          format: date-time
          description: "Next planned check"
          example: "2020-11-23T10:26:19+01:00"
        performance_data:
          type: string
          description: "Details of performance"
          example: "rta=0,098ms;3000,000;5000,000;0; pl=0%;80;100;0;100 rtmax=0,098ms;;;; rtmin=0,098ms;;;;"
        execution_time:
          type: number
          format: float
          description: "Check duration"
          example: 0.005618
        latency:
          type: number
          format: float
          description: "Host Latency"
          example: 0.117
        downtimes:
          type: array
          items:
            $ref: "#/components/schemas/Downtime.Host"
        acknowledgement:
          $ref: "#/components/schemas/Acknowledgement.Host"
    Monitoring.Resource.Disacknowledge.Host:
      type: object
      properties:
        type:
          type: string
          description: "Type of the resource"
          example: "service|host"
        id:
          type: integer
          format: int32
          description: "ID of the resource"
          example: 12
    Monitoring.Resource.Disacknowledge.Service:
      type: object
      properties:
        type:
          type: string
          description: "Type of the resource"
          example: "service|host"
        id:
          type: integer
          format: int32
          description: "ID of the resource"
          example: 12
        parent:
          type: object
          properties:
            id:
              type: integer
              format: int64
              description: "ID of the parent resource"
              example: 12
    Monitoring.ResourceMain:
      type: object
      properties:
        type:
          type: string
          description: "Type of the resource"
          example: "service|host"
        short_type:
          type: string
          description: "Short name of the resource type"
          example: "s|h"
        id:
          type: integer
          format: int32
          description: "ID of the resource"
          example: 12
        name:
          type: string
          description: "Resource name"
          example: "Ping"
        alias:
          type: string
          nullable: true
          description: "Resource alias"
          example: null
        fqdn:
          type: string
          nullable: true
          description: "Resource fqdn"
          example: null
        links:
          $ref: '#/components/schemas/Monitoring.ResourceLinks'
        icon:
          type: object
          nullable: true
          properties:
            name:
              type: string
              description: "Name of the icon"
              example: "memory"
            url:
              type: string
              description: "Url of the icon"
              example: "/media/memory.png"
        parent:
          type: object
          nullable: true
          properties:
            type:
              type: string
              description: "Type of the resource"
              example: "service|host"
            short_type:
              type: string
              description: "Short name of the resource type"
              example: "s|h"
            id:
              type: integer
              format: int64
              description: "ID of the parent resource"
              example: 12
            name:
              type: string
              description: "Parent resource name"
              example: "Central"
            alias:
              type: string
              nullable: true
              description: "Parent resource alias"
              example: "Host"
            fqdn:
              type: string
              description: "Parent resource fqdn"
              example: "127.0.0.1"
            links:
              $ref: '#/components/schemas/Monitoring.ResourceLinks'
            status:
              type: object
              properties:
                code:
                  type: integer
                  description: |
                    resource status code
                    * `0` - UP or OK
                    * `1` - DOWN or WARNING
                    * `2` - UNREACHABLE or CRITICAL
                    * `3` - UNKNOWN
                    * `4` - PENDING
                  example: 0
                name:
                  type: string
                  description: |
                    resource status name
                    * UP
                    * DOWN
                    * UNREACHABLE
                    * PENDING
                    * OK
                    * WARNING
                    * CRITICAL
                    * UNKNOWN
                  example: "UP"
                severity_code:
                  type: integer
                  description: |
                    resource status name
                    * `1` - DOWN or CRITICAL
                    * `2` - WARNING
                    * `3` - UNKNOWN or UNREACHABLE
                    * `4` - PENDING
                    * `5` - UP or OK
                  example: 1
            icon:
              type: object
              nullable: true
              properties:
                name:
                  type: string
                  description: "Name of the icon"
                  example: "linux"
                url:
                  type: string
                  description: "Url of the icon"
                  example: "/img/media/topology/firewall.png"
        status:
          $ref: '#/components/schemas/Monitoring.ResourceStatus'
        in_downtime:
          type: boolean
          description: "Indicates whether resource is in downtime"
          example: false
        acknowledged:
          type: boolean
          description: "Indicates whether resource is acknowledged"
          example: false
        severity:
          type: object
          nullable: true
          properties:
            level:
              type: integer
              description: "level of the severity"
              example: 1
            name:
              type: string
              description: "Name of the severity"
              example: "severity 1"
        duration:
          type: string
          nullable: true
          description: "Duration since last status change"
          example: "2h 3m"
        last_status_change:
          type: string
          format: date-time
          nullable: true
          description: "Date of the last status change (ISO8601)"
        tries:
          type: string
          nullable: true
          description: "Number of check tries"
          example: "3/3 (H)"
        last_check:
          type: string
          nullable: true
          description: "Duration since last check"
          example: "1h 45m"
        information:
          type: string
          description: "Output of the resource"
          example: "OK - Ping is ok"
        active_checks:
          type: boolean
          nullable: true
          description: "Indicates whether active checks are enabled"
          example: true
        passive_checks:
          type: boolean
          nullable: true
          description: "Indicates whether passive checks are enabled"
          example: true
    Monitoring.ResourceLinks:
      type: object
      properties:
        uris:
          type: object
          properties:
            configuration:
              type: string
              nullable: true
              description: "configuration uri"
              example: "/centreon/main.php?p=60101&o=c&host_id=11"
            logs:
              type: string
              nullable: true
              description: "logs uri"
              example: "/centreon/main.php?p=20301&h=11"
            reporting:
              type: string
              nullable: true
              description: "reporting uri"
              example: "/centreon/main.php?p=307&host=11"
        endpoints:
          type: object
          properties:
            details:
              type: string
              nullable: true
              description: "resource details endpoint"
              example: "/centreon/api/beta/monitoring/resources/hosts/11"
            timeline:
              type: string
              nullable: true
              description: "resource timeline endpoint"
              example: "/centreon/api/beta/monitoring/hosts/11/timeline"
            status_graph:
              type: string
              nullable: true
              description: "resource status graph endpoint"
              example: null
            performance_graph:
              type: string
              nullable: true
              description: "resource performance graph endpoint"
              example: null
            acknowledgement:
              type: string
              nullable: true
              description: "current resource acknowledgement endpoint"
              example: "/centreon/api/beta/monitoring/hosts/11/acknowledgements?limit=1"
            downtime:
              type: string
              nullable: true
              description: "current resource downtimes endpoint"
              example: "/centreon/api/beta/monitoring/hosts/11/downtimes?search=%7B%22%24and%22:%5B%7B%22start_time%22:%7B%22%24lt%22:1599655905%7D,%22end_time%22:%7B%22%24gt%22:1599655905%7D,%220%22:%7B%22%24or%22:%7B%22is_cancelled%22:%7B%22%24neq%22:1%7D,%22deletion_time%22:%7B%22%24gt%22:1599655905%7D%7D%7D%7D%5D%7D"
        externals:
            type: object
            properties:
              action_url:
                type: string
                nullable: true
                description: "URL that can be used to provide more actions to be performed on the resource"
                example: "http://mediawiki/resource/name"
              notes_url:
                type: string
                nullable: true
                description: "URL that can be used to provide more information on the resource"
                example: "http://mediawiki/resource/name"
    Monitoring.ResourceStatus:
      type: object
      properties:
        code:
          type: integer
          description: |
            resource status code
            * `0` - UP or OK
            * `1` - DOWN or WARNING
            * `2` - UNREACHABLE or CRITICAL
            * `3` - UNKNOWN
            * `4` - PENDING
          example: 0
        name:
          type: string
          description: |
            resource status name
            * UP
            * DOWN
            * UNREACHABLE
            * PENDING
            * OK
            * WARNING
            * CRITICAL
            * UNKNOWN
          example: "UP"
        severity_code:
          type: integer
          description: |
            resource status name
            * `1` - DOWN or CRITICAL
            * `2` - WARNING
            * `3` - UNKNOWN or UNREACHABLE
            * `4` - PENDING
            * `5` - UP or OK
          example: 1
    Monitoring.HostGroup:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "ID of the host group"
          example: 28
        name:
          type: string
          description: "Name of the host group"
          example: "All"
        host:
          allOf:
            - $ref: '#/components/schemas/Monitoring.HostMin'
            - $ref: '#/components/schemas/Monitoring.HostWithService'
    Monitoring.HostMin:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "ID of the host"
          example: 12
        alias:
          type: string
          description: "Host alias"
          example: "Central"
        display_name:
          type: string
          description: "Host display name"
          example: "Central"
        name:
          type: string
          description: "Host name"
          example: "Central"
        state:
          type: integer
          description: |
            Host state
             * `0` - UP
             * `1` - DOWN
             * `2` - UNREACHABLE
             * `4` - PENDING
          example: 0
    Monitoring.HostFull:
      allOf:
        - $ref: '#/components/schemas/Monitoring.HostMain'
        - type: object
          properties:
            active_checks:
              type: boolean
              description: "Indicates whether active checks are enabled for the host"
              example: true
            check_command:
              type: string
              description: "Command name used for active checks"
              example: "base_host_alive"
            check_interval:
              type: number
              format: float
              description: "Interval between two checks"
              example: 5.0
            check_period:
              type: string
              description: "Name of the check period"
              example: "24x7"
            check_type:
              type: integer
              description: |
                Type of the last check
                  * `0` - Active
                  * `1` - Passive
              example: 0
            last_hard_state:
              type: string
              nullable: true
              format: date-time
              description: "Date of the last hard state (ISO8601)"
            last_notification:
              type: string
              nullable: true
              format: date-time
              description: "Date of the last notification (ISO8601)"
            latency:
              type: number
              format: float
              description: "Time difference between scheduled check time and actual check time"
              example: 0.005
            next_check:
              type: string
              nullable: true
              format: date-time
              description: "Scheduled date for the next check (ISO8601)"
            next_host_notification:
              type: integer
              description: ...
            notification_interval:
              type: number
              format: float
              description: "Interval of periodic notification or `0` if its off"
              example: 30.0
            notification_number:
              type: integer
              description: "Current notification number"
              example: 3
            notify:
              type: boolean
              description: "Indicates whether notifications of the host are enabled"
              example: true
            notify_on_down:
              type: boolean
              description: "Indicates whether notifications are sent when the host is down"
              example: true
            notify_on_downtime:
              type: boolean
              description: "Indicates whether a notification is sent when the host is put in a downtime period"
              example: false
            notify_on_flapping:
              type: boolean
              description: "Indicates whether notifications are sent when the host is flapping"
              example: false
            notify_on_recovery:
              type: boolean
              description: "Indicates whether notifications are sent when the host has recovered"
              example: true
            notify_on_unreachable:
              type: boolean
              description: "Indicates whether notifications are sent when the host is unreachable"
              example: false
            flapping:
              type: boolean
              description: "Is the host flapping or not"
              example: false
            percent_state_change:
              type: number
              format: float
              description: "Percent state change since last check"
              example: 3.5
            downtimes:
              type: array
              items:
                $ref: '#/components/schemas/Downtime.Host'
            acknowledgement:
              type: object
              properties:
                host:
                  allOf:
                    - $ref: '#/components/schemas/Acknowledgement.Host'
    Monitoring.HostMain:
      allOf:
        - $ref: '#/components/schemas/Monitoring.HostMin'
        - $ref: '#/components/schemas/Monitoring.HostWithService'
        - type: object
          properties:
            poller_id:
              type: integer
              format: int64
              description: "ID of the poller to which the host is linked"
              example: 1
            acknowledged:
              type: boolean
              description: "Indicates whether the last status was acknowledged"
              example: false
            address_ip:
              type: string
              format: ipv4
              description: "IP address of the host"
              example: "127.0.0.1"
            check_attempt:
              type: integer
              description: "Number of the current check attempt"
              example: 1
            checked:
              type: boolean
              description: "Indicates whether the host is checked"
              example: true
            execution_time:
              type: number
              format: float
              nullable: true
              description: "Time duration to check the host"
              example: 0.070906
            icon_image:
              type: string
              description: "File of the icon used to represent this host"
              example: "ppm/operatingsystems-linux-snmp-linux-128.png"
            icon_image_alt:
              type: string
              description: "Alternative text of the icon representing the host"
              example: ""
            last_check:
              type: string
              format: date-time
              nullable: true
              description: "Date of last check (ISO8601)"
            last_hard_state_change:
              type: string
              format: date-time
              nullable: true
              description: "Date of the last hard state change (ISO8601)"
            last_state_change:
              type: string
              format: date-time
              nullable: true
              description: "Date of the last state change (soft or hard) (ISO8601)"
            last_time_down:
              type: string
              format: date-time
              nullable: true
              description: "The last time the host was DOWN (ISO8601)"
            last_time_unreachable:
              type: string
              format: date-time
              nullable: true
              description: "The last time the host was UNREACHABLE (ISO8601)"
            last_time_up:
              type: string
              format: date-time
              nullable: true
              description: "The last time the host was UP (ISO8601)"
            last_update:
              type: string
              format: date-time
              nullable: true
              description: "Date of last update (ISO8601)"
            max_check_attempts:
              type: integer
              format: int64
              description: "Max check attempts for active host check (before changing the state type to HARD)"
              example: 3
            output:
              type: string
              description: "Output of the last host check"
              example: "OK - 127.0.0.1 rta 0.100ms lost 0%\n"
            passive_checks:
              type: boolean
              description: "Indicates whether the check script is passive or not"
              example: false
            state_type:
              type: integer
              description: |
                State type
                 * `0` - SOFT
                 * `1` - HARD
              example: 0
            timezone:
              type: string
              description: Timezone used for dates
              example: ':Europe/Paris'
            scheduled_downtime_depth:
              type: integer
              description: "Is there scheduled downtime for host or not (1 or 0)"
              example: 0
            criticality:
              type: integer
              nullable: true
              description: "Host criticality level (for display purposes)"
              example: 10
    Monitoring.HostWithService:
      type: object
      properties:
        services:
          type: array
          items:
            $ref: '#/components/schemas/Monitoring.ServiceMin'
    Monitoring.ServiceGroup:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "ID of the service group"
          example: 13
        name:
          type: string
          description: "Name of the service group"
          example: "MySG"
    Monitoring.ServiceMin:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "ID of the service"
          example: 5
        description:
          type: string
          description: "Service description"
          example: "Ping"
        display_name:
          type: string
          description: "Service display name"
          example: "Ping"
        state:
          type: integer
          description: |
            The current state of the service
              * `0` - OK
              * `1` - WARNING
              * `2` - CRITICAL
              * `3` - UNKNOWN
              * `4` - PENDING
          example: 0
    Monitoring.ServiceMain:
      allOf:
        - $ref: '#/components/schemas/Monitoring.ServiceMin'
        - type: object
          properties:
            check_attempt:
              type: string
              description: "Number of the current check attempt"
              example: 1
            icon_image:
              type: string
              description: "File name of the icon representing the service"
              example: ""
            icon_image_alt:
              type: string
              description: "Alternative text of the icon representing the service"
              example: ""
            last_check:
              type: string
              format: date-time
              nullable: true
              description: "Date of last check (ISO8601)"
            last_state_change:
              type: string
              format: date-time
              nullable: true
              description: "Date of the last state change (ISO8601)"
            max_check_attempts:
              type: integer
              description: "Max check attempts"
              example: 3
            output:
              type: string
              description: "Output of the last service check"
              example: "OK - 127.0.0.1 rta 0.025ms lost 0%\n"
            state_type:
              type: integer
              description: |
                Type of the current state
                  * `0` - SOFT
                  * `1` - HARD
              example: 1
            criticality:
              type: integer
              nullable: true
              description: "Service criticality level (for display purposes)"
              example: 10
            status:
              $ref: '#/components/schemas/Monitoring.ResourceStatus'
            duration:
              type: string
              nullable: true
              description: "Duration since last status change"
              example: "2h 3m"
    Monitoring.ServiceFull:
      allOf:
        - $ref: '#/components/schemas/Monitoring.ServiceMain'
        - type: object
          properties:
            check_command:
              type: string
              description: "Command name used for active checks"
              example: "base_centreon_ping"
            check_interval:
              type: number
              format: float
              description: "Interval between two scheduled checks of the service"
              example: 5.0
            check_period:
              type: string
              description: "Name of the check period"
              example: "24x7"
            check_type:
              type: integer
              description: |
                Type of the last check
                  * `0` - Active
                  * `1` - Passive
              example: 0
            command_line:
              type: string
              nullable: true
              description: "Command used for active checks"
              example: "/usr/lib64/nagios/plugins/check_icmp -H 127.0.0.1 -n 5 -w 200,20% -c 400,50%"
            execution_time:
              type: number
              format: float
              description: "Time duration to check the service"
              example: 0.179335
            is_acknowledged:
              type: boolean
              description: "Indicates whether the last status was acknowledged"
              example: false
            is_active_check:
              type: boolean
              description: "Indicates whether active checks are enabled for the service"
              example: true
            is_checked:
              type: boolean
              description: "Indicates whether the service has been checked"
              example: true
            last_hard_state_change:
              type: string
              format: date-time
              nullable: true
              description: "Date of the last hard state change (ISO8601)"
            last_notification:
              type: string
              format: date-time
              nullable: true
              description: "Date of the last notification (ISO8601)"
            last_time_critical:
              type: string
              format: date-time
              nullable: true
              description: "The last time the service was CRITICAL (ISO8601)"
            last_time_ok:
              type: string
              format: date-time
              nullable: true
              description: "The last time the service was OK (ISO8601)"
            last_time_unknown:
              type: string
              format: date-time
              nullable: true
              description: "The last time the service was UNKNOWN (ISO8601)"
            last_time_warning:
              type: string
              format: date-time
              nullable: true
              description: "The last time the service was WARNING (ISO8601)"
            last_update:
              type: string
              format: date-time
              nullable: true
              description: "Date of the last update (ISO8601)"
            latency:
              type: number
              format: float
              description: "Time difference between scheduled check time and actual check time"
              example: 0.031
            next_check:
              type: string
              nullable: true
              format: date-time
              description: "Scheduled date for the next check (ISO8601)"
            performance_data:
              type: string
              description: "Performance data of the last check plugin"
              example: "rta=0.025ms;200.000;400.000;0; rtmax=0.061ms;;;; rtmin=0.015ms;;;; pl=0%;20;50;0;100 "
            scheduled_downtime_depth:
              type: integer
              description: "Number of scheduled downtimes the service is currently in"
              example: 0
            downtimes:
              type: array
              items:
                $ref: '#/components/schemas/Downtime.Service'
            acknowledgement:
              allOf:
                - $ref: '#/components/schemas/Acknowledgement.Service'
              type: object
              nullable: true
            flapping:
              type: boolean
              description: "Is the host flapping or not"
              example: false
    Monitoring.ServiceWithHost:
      type: object
      properties:
        hosts:
          $ref: '#/components/schemas/Monitoring.HostMin'
    Bulk.Resource.Id:
      type: object
      properties:
        resource_id:
          type: integer
          format: int64
          description: "ID of the resource"
          example: 12
        parent_resource_id:
          type: integer
          format: int64
          nullable: true
          description: "ID of the parent resource (eg: host id)"
          example: 5
    Configuration.Proxy:
      type: object
      properties:
        url:
          type: string
          description: "URL of the proxy"
          example: "proxy.internal.company.org"
        port:
          type: integer
          description: "Port of the proxy"
          minimum: 0
          maximum: 65535
          example: 3128
        user:
          type: string
          nullable: true
          description: "Login used to connect to proxy"
          example: "proxy-user"
        password:
          type: string
          nullable: true
          description: "Password used to connect to proxy"
          example: "proxy-pass"
      required:
        - url
        - port
        - user
        - password
    Monitoring.TimelineEvent:
      type: object
      properties:
        id:
          type: integer
          description: "Id of the event (it is not uniq)"
          example: 1
        type:
          type: string
          enum: [event, notification, downtime, acknowledgement, comment]
          description: "Type of event"
          example: "event"
        date:
          type: string
          format: date-time
          description: "The date the event happened (ISO8601)"
        start_date:
          type: string
          format: date-time
          nullable: true
          description: "The date the event started (ISO8601) (start date of downtime)"
        end_date:
          type: string
          format: date-time
          nullable: true
          description: "The date the event ended (ISO8601) (end date of downtime)"
        content:
          type: string
          description: "The content of the event"
        contact:
          type: object
          nullable: true
          description: "The contact of the event"
          properties:
            id:
              type: integer
              nullable: true
              description: "Id of the contact"
            name:
              type: string
              description: "Name of the contact"
        status:
          $ref: '#/components/schemas/Monitoring.ResourceStatus'
        tries:
          type: integer
          nullable: true
          description: "The count of retry"
    Topology.Register:
      type: object
      required: [name, type, address]
      properties:
        name:
          type: string
          description: "Name of the server to register in the topology"
          example: "myPoller"
        hostname:
          type: string
          description: "Platform's 'physical' name"
          example: "my.poller.physical.hostname"
        type:
          type: string
          enum: [central, poller, remote, map, mbi]
          example: "poller"
          description: >
            Type of the server from available Server types :
              * 'Central'
              * 'Poller'
              * 'Remote'
              * 'MAP'
              * 'MBI'
        address:
          type: string
          description: "Address of the server. IPv4, IPv6 or DNS"
          example: "1.1.1.2"
        parent_address:
          type: string
          description: >
            It should not be added to register a Central or other platforms in specific cases:
            Eg : To register a remote server as top level platform on its own platform.

            Mandatory parameter for all other types, to be able to link a platform to its parent
            Example :
            - To link a poller to a Central
            - To link a remote server to a Central
            - To link a poller to a remote server
          example: "1.1.1.1"
    Gorgone.Response:
      type: object
      properties:
        message:
          type: string
          description: "Message returned by Gorgone"
          example: "Logs found"
        token:
          type: string
          description: "Token used to identify the command"
        data:
          type: array
          items:
            type: object
            properties:
              creation_time:
                type: string
                format: date-time
                description: "Creation of dataset in ISO Format"
                example: "2020-11-24T09:13:04+01:00"
              event_time:
                type: string
                format: date-time
                description: "Time when event occured in ISO Format"
                example: "2020-11-24T09:11:00+01:00"
              id:
                type: number
                format: integer
                description: "Id of the Event"
                example: 1
              token:
                type: string
                description: "Token used to identify the command"
              code:
                type: number
                format: integer
                description: "Return code of response"
                example: 2
              data:
                type: string
                description: "Data on JSON Format"
                example: "{\"action\":\"getthumbprint\",\"data\":{\"thumbprint\":\"xxxx_xxxxxxxxx\"},\"message\":\"ok\"}"
