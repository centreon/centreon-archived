openapi: 3.0.1
info:
  title: Centron API
  description: |
    **Centron API v2**
    # New features
    + Added real-time monitoring for hosts and services
    # Information
    All dates are in **ISO 8601** format
    # Authentication
    There are two modes of authentication:
    * By token: after identification with your login credentials
    * By cookie: by reusing a valid session ID
  x-logo:
    url: ./centreon-logo.png
  contact:
    url: 'https://www.centreon.com'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 2.0.0
externalDocs:
  description: You can contact us on our community Slack
  url: 'https://centreon.slack.com/messages/CCRGLQSE5'
servers:
  - url: 'http://{server}/centreon/api/{version}'
    variables:
      server:
        default: localhost
      version:
        default: latest
        enum:
          - latest
          - beta
          - v2
tags:
  - name: Authentication token
  - name: Monitoring
    description: Real-time monitoring of the services and hosts
security:
  - Token: []
  - Cookie: []
paths:
  /login:
    post:
      tags:
        - Authentication token
      summary: Login
      description: Entry point to retrieve an authentication token.
      security:
        - Token: []
      requestBody:
        description: Authentication schema
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginAuthenticationResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorApiResponse'
  /logout:
    get:
      tags:
        - Authentication token
      summary: Logout
      description: Entry point to delete an existing authentication token.
      security:
        -   Token: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutAuthenticationResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenApiResponse'
  /monitoring/hostgroups:
    get:
      tags:
        - Monitoring
      summary: List all services grouped by host groups
      description: |
        Returns all services grouped by host groups.

        The available parameters to **search** / **sort_by** are:

        * host.id
        * host.name
        * host.alias
        * host.address
        * host.state
        * poller.id
        * service.display_name
        * host_group.id
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Monitoring.HostGroup'
                  meta:
                    $ref: '#/components/schemas/Meta'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenApiResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorApiResponse'
  /monitoring/hosts:
    get:
      tags:
        - Monitoring
      summary: List all hosts
      description: |
        Returns all hosts.

        The available parameters to **search** / **sort_by** are:

        * host.id
        * host.name
        * host.alias
        * host.address
        * host.state
        * poller.id
        * service.display_name
        * host_group.id

        # Information
        By default, the **services** property of host object is not displayed.
        To display it, set the URI parameter "show_service" to `true`.

        `/monitoring/hosts?show_service=true`
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/search'
        - name: show_service
          in: query
          description: |
            Allows to display services belonging to hosts (by default: **false**)
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Monitoring.Host_main'
                  meta:
                    $ref: '#/components/schemas/Meta'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenApiResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorApiResponse'
  /monitoring/hosts/{hostId}:
    get:
      tags:
        - Monitoring
      summary: Find host by ID
      description: |
        Retuns a single host with full details and some details about its services
      parameters:
        - name: hostId
          in: path
          description: ID of host to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitoring.Host_full'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenApiResponse'
        404:
          description: Host not found
          content: {}
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorApiResponse'
  /monitoring/hosts/{hostId}/services:
    get:
      tags:
        - Monitoring
      summary: Find host-related services
      description: |
        Returns all services associated with a host.

        The available parameters to **search** / **sort_by** are:

        * service.id
        * service.description
        * service.display_name
        * service_group.id
        * service.is_acknowledged
        * service.state
      parameters:
        - name: hostId
          in: path
          description: Host Id for which we want to get its associated services
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Monitoring.Service_main'
                  meta:
                    $ref: '#/components/schemas/Meta'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenApiResponse'
        404:
          description: Host not found
          content: {}
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorApiResponse'
  /monitoring/hosts/{hostId}/services/{serviceId}:
    get:
      tags:
        - Monitoring
      summary: Find service by ID related to a host
      description: Retuns a single host with full details
      parameters:
        - name: hostId
          in: path
          description: Host Id for which service is associed
          required: true
          schema:
            type: integer
            format: int64
        - name: serviceId
          in: path
          description: ID of service to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitoring.Service_full'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenApiResponse'
        404:
          description: Host or service not found
          content: {}
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorApiResponse'
  /monitoring/servicegroups:
    get:
      tags:
        - Monitoring
      summary: List all services grouped by service groups
      description: |
        Returns all services grouped by service groups.

        The available parameters to **search** / **sort_by** are:

        * host.id
        * host.name
        * host.alias
        * host.address
        * host.state
        * poller.id
        * service.display_name
        * service_group.id
        * service_group.name
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Monitoring.ServiceGroup'
                  meta:
                    $ref: '#/components/schemas/Meta'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenApiResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorApiResponse'
  /monitoring/services:
    get:
      tags:
        - Monitoring
      summary: List all services
      description: |
        Returns all services.


        The available parameters to **search** / **sort_by** are:

        * host.id
        * host.name
        * host.alias
        * host.address
        * host.state
        * host_group.id
        * service.display_name
        * service.description
        * service.is_acknowledged
        * service.output
        * service.state
        * service_group.id
        * poller.id
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Monitoring.Service_main'
                        - $ref: '#/components/schemas/Monitoring.Service_with_host'
                  meta:
                    $ref: '#/components/schemas/Meta'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenApiResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorApiResponse'
components:
  parameters:
    limit:
      in: query
      name: limit
      required: false
      description: Max items per pages
      schema:
        $ref: '#/components/schemas/RequestParameters.limit'
    page:
      in: query
      name: page
      required: false
      description: Number of the page requested
      schema:
        $ref: '#/components/schemas/RequestParameters.page'
    sortBy:
      in: query
      name: sort_by
      required: false
      description: Used to sort the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestParameters.sortBy'
    search:
      in: query
      name: search
      required: false
      description: Used to search with specifics parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestParameters.search'
  schemas:
    Monitoring.HostGroup:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique id of the host group
        name:
          type: string
          description: Name of the host group
        host:
          allOf:
            - $ref: '#/components/schemas/Monitoring.Host_min'
            - $ref: '#/components/schemas/Monitoring.Host_with_service'
    Monitoring.Host_min:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique host id
        alias:
          type: string
          description: Host alias
        display_name:
          type: string
          description: Host display name
        name:
          type: string
          description: Host name
        state:
          type: integer
          description: |
            Host state
             * `0` - UP
             * `1` - DOWN
             * `2` - UNREACHABLE
             * `4` - PENDING
    Monitoring.Host_full:
      allOf:
        - $ref: '#/components/schemas/Monitoring.Host_main'
        - type: object
          properties:
            active_checks:
              type: boolean
              description: Indicates whether active checks are enabled for the host
            check_command:
              type: string
              description: Command name used for active checks
            check_interval:
              type: number
              format: float
              description: Interval between two checks
            check_period:
              type: string
              description: Name of the check period
            check_type:
              type: integer
              description: |
                Type of the last check
                  * `0` - Active
                  * `1` - Passive
            last_hard_state:
              type: string
              format: date-time
              description: Date of the last hard state (ISO8601)
            last_notification:
              type: string
              format: date-time
              description: Date of the last notification (ISO8601)
            latency:
              type: string
              format: float
              description: >-
                Time difference between scheduled check time and actual check
                time
            next_check:
              type: string
              format: date-time
              description: Scheduled date for the next check (ISO8601)
            next_host_notification:
              type: integer
              description: ...
            notification_interval:
              type: number
              format: float
              description: Interval of periodic notification or `0` if its off
            notification_number:
              type: integer
              description: Current notification number
            notify:
              type: boolean
              description: Indicates whether notifications of the host are enabled
            notify_on_down:
              type: boolean
              description: >-
                Indicates whether notifications of the host are enabled when the
                host is down
            notify_on_downtime:
              type: boolean
              description: >-
                Indicates whether notifications of the host are enabled when the
                host is down due to scheduling.
            notify_on_flapping:
              type: boolean
              description: >-
                Indicates whether notifications of the host are enabled when the
                host flapping
            notify_on_recovery:
              type: boolean
              description: >-
                Indicates whether notifications of the host are enabled when the
                host is recovery
            notify_on_unreachable:
              type: boolean
              description: >-
                Indicates whether notifications of the host are enabled when the
                host is unreachable
    Monitoring.Host_main:
      allOf:
        - $ref: '#/components/schemas/Monitoring.Host_min'
        - $ref: '#/components/schemas/Monitoring.Host_with_service'
        - type: object
          properties:
            poller_id:
              type: integer
              format: int64
              description: Unique poller id for which the host is linked
            acknowledged:
              type: boolean
              description: Indicates whether the last status was acknowledged
            address_ip:
              type: string
              format: ipv4
              description: IP address of the host
            check_attempt:
              type: integer
              description: Number of the current check attempt
            checked:
              type: boolean
              description: Indicates whether the host is checked
            execution_time:
              type: number
              format: float
              description: Execution time to check the host
            icon_image:
              type: string
              description: File of the icon used to represent this host
            icon_image_alt:
              type: string
              description: Alternative text of the icon representing the host
            last_check:
              type: string
              format: date-time
              description: Date of last check (ISO8601)
            last_hard_state_change:
              type: string
              format: date-time
              description: Date of the last hard state change (ISO8601)
            last_state_change:
              type: string
              format: date-time
              description: Date of the last state change (soft or hard) (ISO8601)
            last_time_down:
              type: string
              format: date-time
              description: The last time the host was DOWN (ISO8601)
            last_time_unreachable:
              type: string
              format: date-time
              description: The last time the host was UNREACHABLE (ISO8601)
            last_time_up:
              type: string
              format: date-time
              description: The last time the host was UP (ISO8601)
            last_update:
              type: string
              format: date-time
              description: Date of last update (ISO8601)
            max_check_attempts:
              type: integer
              format: int64
              description: >-
                Max check attempts for active host check. (before changing the
                state type to HARD)
            output:
              type: string
              description: Output of the last host check
            passive_checks:
              type: boolean
              description: Indicates whether the check script is passive or not
            state_type:
              type: integer
              description: |
                State type
                 * `0` - SOFT
                 * `1` - HARD
            timezone:
              type: string
              description: Timezone used for dates
              example: ':Europe/Paris'
    Monitoring.Host_with_service:
      type: object
      properties:
        services:
          type: array
          items:
            $ref: '#/components/schemas/Monitoring.Service_min'
    Monitoring.ServiceGroup:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique id of the service group
        name:
          type: string
          description: Name of the service group
        host:
          allOf:
            - $ref: '#/components/schemas/Monitoring.Host_min'
            - $ref: '#/components/schemas/Monitoring.Host_with_service'
    Monitoring.Service_min:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique service id
        description:
          type: string
          description: Service description
        display_name:
          type: string
          description: Service display name
        state:
          type: integer
          description: |
            The current state of the service
              * `0` - OK
              * `1` - WARNING
              * `2` - CRITICAL
              * `3` - UNKNOWN
              * `4` - PENDING
    Monitoring.Service_main:
      allOf:
        - $ref: '#/components/schemas/Monitoring.Service_min'
        - type: object
          properties:
            check_attempt:
              type: integer
              format: int64
              description: Number of the current check attempt
            icon_image:
              type: string
              description: File name of the icon representing the service
            icon_image_alt:
              type: string
              description: Alternative text of the icon representing the service
            last_check:
              type: string
              format: date-time
              description: Date of last check (ISO8601)
            last_state_change:
              type: string
              format: date-time
              description: Date of the last state change (ISO8601)
            max_check_attempts:
              type: integer
              description: Max check attempts
            output:
              type: string
              description: Output of the last service check
            state_type:
              type: integer
              description: |
                Type of the current state
                  * `0` - SOFT
                  * `1` - HARD
    Monitoring.Service_full:
      allOf:
        - $ref: '#/components/schemas/Monitoring.Service_main'
        - type: object
          properties:
            check_command:
              type: string
              description: Command name used for active checks
            check_interval:
              type: number
              format: float
              description: Interval between two scheduled checks of the service
            check_period:
              type: string
              description: Name of the check period
            check_type:
              type: integer
              description: |
                Type of the last check
                  * `0` - Active
                  * `1` - Passive
            command_line:
              type: string
              description: Command used for active checks
            execution_time:
              type: number
              format: float
              description: Execution time to check the service
            is_acknowledged:
              type: boolean
              description: Indicates whether the last status was acknowledged
            is_active_check:
              type: boolean
              description: Indicates whether active checks are enabled for the service
            is_checked:
              type: boolean
              description: ...
            last_hard_state_change:
              type: string
              format: date-time
              description: Date of the last hard state change (ISO8601)
            last_notification:
              type: string
              format: date-time
              description: Date of the last notification (ISO8601)
            last_time_critical:
              type: string
              format: date-time
              description: The last time the service was CRITICAL (ISO8601)
            last_time_ok:
              type: string
              format: date-time
              description: The last time the service was OK (ISO8601)
            last_time_unknown:
              type: string
              format: date-time
              description: The last time the service was UNKNOWN (ISO8601)
            last_time_warning:
              type: string
              format: date-time
              description: The last time the service was WARNING (ISO8601)
            last_update:
              type: string
              format: date-time
              description: Date of the last update (ISO8601)
            latency:
              type: number
              format: float
              description: >-
                Time difference between scheduled check time and actual check
                time
            next_check:
              type: string
              format: date-time
              description: Scheduled date for the next check (ISO8601)
            performance_data:
              type: string
              description: Performance data of the last check plugin
            scheduled_downtime_depth:
              type: integer
              description: Number of scheduled downtimes the service is currently in
    Monitoring.Service_with_host:
      type: object
      properties:
        hosts:
          type: object
          $ref: '#/components/schemas/Monitoring.Host_min'
    Meta:
      type: object
      properties:
        page:
          type: integer
          description: Number of the pagined page
        limit:
          type: integer
          description: Number of items per page
        search:
          type: object
          description: Search parameter pass to url
        sort_by:
          type: object
          description: Sort parameter pass to url
        total:
          type: integer
          description: Number of items found
    RequestParameters.limit:
      type: integer
      minimum: 1
      example: 20
    RequestParameters.page:
      type: integer
      minimum: 1
      example: 1
    RequestParameters.sortBy:
      type: object
      example: {"host.name": "ASC"}
    RequestParameters.search:
      type: object
      example: {"host.name": "localhost"}
    ForbiddenApiResponse:
      type: object
      properties:
        message:
          type: string
    ErrorApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int64
        message:
          type: string
    AuthenticationRequest:
      type: object
      properties:
        security:
          type: object
          properties:
            credentials:
              type: object
              properties:
                login:
                  type: string
                  description: Login
                password:
                  type: string
                  description: password
    LoginAuthenticationResponse:
      type: object
      properties:
        contact:
          type: object
          properties:
            id:
              type: integer
              description: Contact id
            name:
              type: string
              description: Contact name
            alias:
              type: string
              description: Alias of the contact
            email:
              type: string
              format: email
              description: Email of the contact
            is_admin:
              type: boolean
              description: Indicates whether it is an admin user or not
        security:
          type: object
          properties:
            token:
              type: string
              description: Security authentication token
    LogoutAuthenticationResponse:
      type: object
      properties:
        message:
          type: string
  securitySchemes:
    Token:
      description: |
        The use of the API requires a security token.

        To retrieve it, you will need to authenticate yourself with your login credentials.

        The token will be deleted if it has not been used for more than one hour.
      type: apiKey
      name: X-AUTH-TOKEN
      in: header
    Cookie:
      description: |
        If you have already connected on the Centreon web application, you can reused the PHPSESSID cookie.

        The cookie will be valid as long as the connection to Centreon is maintained.
      type: apiKey
      name: PHPSESSID
      in: cookie
