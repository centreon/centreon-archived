<?php

use Centreon\Test\Behat\CentreonContext;
use Centreon\Test\Behat\Configuration\HostConfigurationPage;
use Centreon\Test\Behat\Configuration\ServiceConfigurationPage;
use Centreon\Test\Behat\Configuration\CommentConfigurationPage;
use Centreon\Test\Behat\Configuration\CommentHostConfigurationPage;
use Centreon\Test\Behat\Configuration\CommentListingPage;
use Centreon\Test\Behat\Monitoring\ServiceMonitoringDetailsPage;
use Centreon\Test\Behat\Monitoring\HostMonitoringDetailsPage;
use Centreon\Test\Behat\Exception\ClosureException;

class VulnerabilityCommentContext extends CentreonContext
{
    const HOSTNAME = 'hostName';
    const SERVICE_DESCRIPTION = 'serviceDescription';
    protected $currentPage;
    protected $hostName = "hostname";

    protected $hostProperties = array(
        'name' => self::HOSTNAME,
        'alias' => 'hostAlias',
        'address' => 'host2@localhost'
    );

    private $labelButton = 'test button';

    protected $commentProperties;

    public function __construct(array $parameters = array())
    {
        parent::__construct($parameters);
        $this->commentProperties = [
            'comment' => '<button>' . $this->labelButton . '</button>'
        ];
    }

    protected $serviceProperties = array(
        'hosts' => self::HOSTNAME,
        'description' => self::SERVICE_DESCRIPTION,
        'templates' => 'generic-service',
        'check_command' => 'check_centreon_dummy',
        'check_period' => '24x7',
        'max_check_attempts' => 1,
        'normal_check_interval' => 1,
        'retry_check_interval' => 1,
        'active_checks_enabled' => 1,
        'passive_checks_enabled' => 0,
        'notifications_enabled' => 1,
        'notify_on_recovery' => 1,
        'notify_on_critical' => 1,
        'recovery_notification_delay' => 1,
        'cs' => 'admin_admin'
    );

    /**
     * @Given an host is configured
     */
    public function anHostIsConfigured()
    {
        $currentPage = new HostConfigurationPage($this);
        $currentPage->setProperties($this->hostProperties);
        $currentPage->save();
    }

    /**
     * @Given a service is configured
     */
    public function aServiceIsConfigured()
    {
        $currentPage = new ServiceConfigurationPage($this);
        $currentPage->setProperties($this->serviceProperties);
        $currentPage->save();
    }

    /**
     * @When I add a comment on service
     */
    public function iAddACommentOnService() {
        $this->reloadAllPollers();
        $currentPage = new CommentConfigurationPage(
            $this,
            self::HOSTNAME,
            self::SERVICE_DESCRIPTION
        );
        $currentPage->setProperties($this->commentProperties);
        $currentPage->save();
    }

    /**
     * @When I add a comment on host
     */
    public function iAddACommentOnHost() {
        $this->reloadAllPollers();
        $currentPage = new CommentHostConfigurationPage(
            $this,
            self::HOSTNAME
        );
        $currentPage->setProperties($this->commentProperties);
        $currentPage->save();
    }

    /**
     * @Then The html is not interpreted in general list of comments
     */
    public function theHtmlIsNotInterpretedInGeneralListOfComments() {
        $this->spin(
            function($context) {
                $currentPage = new CommentListingPage($context, true);
                $comments = $currentPage->getEntries();
                if (!empty($comments)) {
                    $comment = array_shift($comments);
                    if ($comment['comment'] === $this->commentProperties['comment']) {
                        return true;
                    } else {
                        throw new ClosureException("XSS vulnerability detected");
                    }
                }
                return false;
            }
        );
    }

    /**
     * @Then The html is not interpreted on comments in service details
     */
    public function theHtmlIsNotInterpretedOnCommentsInServiceDetails() {
        $this->spin(
            function($context) {
                $currentPage = new ServiceMonitoringDetailsPage(
                    $context,
                    self::HOSTNAME,
                    self::SERVICE_DESCRIPTION
                );
                $comments = $currentPage->getComments();
                if (!empty($comments)) {
                    $comment = array_shift($comments);
                    if ($comment['comment'] === $this->commentProperties['comment']) {
                        return true;
                    } else {
                        throw new ClosureException("XSS vulnerability detected");
                    }
                }
                return false;
            }
        );
    }

    /**
     * @Then The html is not interpreted on comments in host details
     */
    public function theHtmlIsNotInterpretedOnCommentsInHostDetails() {
        $this->spin(
            function($context) {
                $currentPage = new HostMonitoringDetailsPage(
                    $context,
                    self::HOSTNAME
                );
                $currentPage->switchTab(4);
                $comments = $currentPage->getComments();
                if (!empty($comments)) {
                    $comment = array_shift($comments);
                    if ($comment['comment'] === $this->commentProperties['comment']) {
                        return true;
                    } else {
                        throw new ClosureException("XSS vulnerability detected");
                    }
                }
                return false;
            }
        );
    }


}
