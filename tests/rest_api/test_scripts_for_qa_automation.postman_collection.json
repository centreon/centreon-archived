{
	"info": {
		"_postman_id": "03148344-675f-4d45-95bd-4ceea8efabd8",
		"name": "Centreon Web Rest API - Relevant test scripts",
		"description": "# New features\n+ Added real-time monitoring for hosts and services\n+ Added acknowledgement for hosts and services\n+ Added downtimes for hosts and services\n+ Added the list of monitoring server configurations\n+ Added the proxy configuration\n# Information\nAll dates are in **ISO 8601** format\n# Authentication\nThere are two modes of authentication:\n* By token: after identification with your login credentials\n* By cookie: by reusing a valid session ID\n\n\nContact Support:\n Name: Centreon",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22770334"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_username'));\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
									"pm.collectionVariables.set(\"user\", responseJson.contact.alias);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{api_username}}\",\n      \"password\": \"{{api_password}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to retrieve an authentication token."
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"contact\": {\n    \"id\": 3,\n    \"name\": \"Admin\",\n    \"alias\": \"admin\",\n    \"email\": \"01A@CrLEnzWrYdgVBaUzldbG.wutx\",\n    \"is_admin\": true\n  },\n  \"security\": {\n    \"token\": \"9ed937d3911d212eae59300ac6977352\"\n  }\n}"
						},
						{
							"name": "Indicates that the server cannot or will not process the request due to something that is perceived to be\na client error (e.g., malformed request syntax, invalid request message framing)\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 400,\n  \"message\": \"Property 'name' not found\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 401,\n  \"message\": \"exercitation sit\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "Update user's password with incorrect password format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Displayed error message is the one that's expected\", function() {\r",
									"    pm.expect(responseJson.message).to.eql(\"[UserPassword::passwordValue] The value ({{currentPassword}}) doesn't match the regex '/[0-9]/'\");\r",
									"});\r",
									"\r",
									"const incorrect_passwords = pm.collectionVariables.get(\"incorrect_passwords_list\");\r",
									"\r",
									"if(incorrect_passwords && incorrect_passwords.length > 0) {\r",
									"    postman.setNextRequest(\"Update user's password with incorrect password format\");\r",
									"} else {\r",
									"    postman.setNextRequest(\"Update user's with correct password format\");\r",
									"    pm.collectionVariables.unset(\"current_password\");\r",
									"    pm.collectionVariables.unset(\"incorrect_passwords_list\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let incorrect_passwords = pm.collectionVariables.get(\"incorrect_passwords_list\");\r",
									"if (!incorrect_passwords || incorrect_passwords.length == 0){\r",
									"    incorrect_passwords = [\"Centreon2021\", \"centreon!2021\", \"2021010203\", \"\", \"CentreonTwoThousandTwentyOne\", \"centreon\"];\r",
									"}\r",
									"\r",
									"let current_password = incorrect_passwords.shift();\r",
									"pm.collectionVariables.set(\"current_password\", current_password);\r",
									"pm.collectionVariables.set(\"incorrect_passwords_list\", incorrect_passwords);\r",
									"// console.log(current_password);\r",
									"// console.log(incorrect_passwords);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"old_password\": \"Centreon!2021\",\n  \"new_password\": \"{{currentPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/authentication/users/:alias/password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authentication",
								"users",
								":alias",
								"password"
							],
							"variable": [
								{
									"key": "alias",
									"value": "{{user}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Password changed",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"old_password\": \"Centreon!2021\",\n  \"new_password\": \"Centreon!2022\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/authentication/users/:alias/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authentication",
										"users",
										":alias",
										"password"
									],
									"variable": [
										{
											"key": "alias",
											"value": "{{user}}"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Update user's with correct password format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"old_password\": \"{{api_password}}\",\n  \"new_password\": \"Centreon!2022\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/authentication/users/:alias/password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authentication",
								"users",
								":alias",
								"password"
							],
							"variable": [
								{
									"key": "alias",
									"value": "{{user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to revert back to old password directly",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Displayed error message is the one that's expected\", function() {\r",
									"    pm.expect(responseJson.message).to.eql(\"Old password usage is disable\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"old_password\": \"Centreon!2022\",\n  \"new_password\": \"{{api_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/authentication/users/:alias/password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authentication",
								"users",
								":alias",
								"password"
							],
							"variable": [
								{
									"key": "alias",
									"value": "{{user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Revert to old password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const buffer_passwords = pm.collectionVariables.get(\"buffer_passwords\");\r",
									"\r",
									"if(buffer_passwords && buffer_passwords.length > 0) {\r",
									"    postman.setNextRequest(\"Revert to old password\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"current_password\");\r",
									"    pm.collectionVariables.unset(\"buffer_passwords\");\r",
									"    pm.collectionVariables.unset(\"old_password\");\r",
									"    postman.setNextRequest(\"Logout\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let buffer_passwords = pm.collectionVariables.get(\"buffer_passwords\");\r",
									"if (!buffer_passwords || buffer_passwords.length == 0){\r",
									"    buffer_passwords = [\"Centreon!2022\", \"Centreon!2023\", \"Centreon!2024\", pm.collectionVariables.get(\"api_password\")];\r",
									"}\r",
									"let old_password = pm.collectionVariables.get(\"current_password\");\r",
									"if(!old_password) {old_password = buffer_passwords.shift();}\r",
									"current_password = buffer_passwords.shift();\r",
									"pm.collectionVariables.set(\"old_password\", old_password);\r",
									"pm.collectionVariables.set(\"current_password\", current_password);\r",
									"pm.collectionVariables.set(\"buffer_passwords\", buffer_passwords);\r",
									"// console.log(current_password);\r",
									"console.log(buffer_passwords);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"old_password\": \"{{old_password}}\",\n  \"new_password\": \"{{current_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/authentication/users/:alias/password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authentication",
								"users",
								":alias",
								"password"
							],
							"variable": [
								{
									"key": "alias",
									"value": "{{user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-AUTH-TOKEN",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to delete an existing authentication token."
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Successful logout\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Host management",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_username'));\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
									"pm.collectionVariables.set(\"user\", responseJson.contact.alias);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{api_username}}\",\n      \"password\": \"{{api_password}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to retrieve an authentication token."
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"contact\": {\n    \"id\": 3,\n    \"name\": \"Admin\",\n    \"alias\": \"admin\",\n    \"email\": \"01A@CrLEnzWrYdgVBaUzldbG.wutx\",\n    \"is_admin\": true\n  },\n  \"security\": {\n    \"token\": \"9ed937d3911d212eae59300ac6977352\"\n  }\n}"
						},
						{
							"name": "Indicates that the server cannot or will not process the request due to something that is perceived to be\na client error (e.g., malformed request syntax, invalid request message framing)\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 400,\n  \"message\": \"Property 'name' not found\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 401,\n  \"message\": \"exercitation sit\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "List all host groups before host group creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"host_groups_before_creation\", responseJson.meta.total);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add host group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let value = pm.collectionVariables.get(\"count_host_group\");\r",
									"if (!value) {value = 0;}\r",
									"value++;\r",
									"pm.collectionVariables.set(\"count_host_group\", value);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"host_group_name\", \"my_hg_name\");\r",
									"pm.collectionVariables.set(\"host_group_alias\", \"my_hg_alias\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \"{{host_group_name}};{{host_group_alias}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List all host groups after host group creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(pm.collectionVariables.get(\"host_groups_before_creation\"));\r",
									"console.log(pm.collectionVariables.get(\"count_host_group\"));\r",
									"\r",
									"if (pm.test(\"The correct number of host groups has been added.\", function() {\r",
									"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"host_groups_before_creation\") + pm.collectionVariables.get(\"count_host_group\"));\r",
									"})) {\r",
									"    pm.collectionVariables.set(\"count_host_group\", responseJson.meta.total);\r",
									"    pm.collectionVariables.unset(\"host_groups_before_creation\");\r",
									"}\r",
									"\r",
									"try {\r",
									"    tests[\"Body contains list of host categories\"] = responseJson;\r",
									"    var i = 0;\r",
									"        while (i < responseJson.meta.total) {\r",
									"        if (pm.collectionVariables.get(\"host_group_name\") == responseJson.result[i].name)\r",
									"        {\r",
									"            pm.test(\"Body contains added host group's name\", function() {\r",
									"                pm.expect(pm.collectionVariables.get(\"host_group_name\")).to.eql(responseJson.result[i].name);\r",
									"            });\r",
									"            pm.test(\"Body contains added host group's alias\", function() {\r",
									"                pm.expect(pm.collectionVariables.get(\"host_group_alias\")).to.eql(responseJson.result[i].alias);\r",
									"            });\r",
									"            break;\r",
									"        }\r",
									"        i++;\r",
									"    }\r",
									"    if (i == responseJson.meta.total)\r",
									"        pm.test(\"host_group_name was found\", function() {\r",
									"            false;\r",
									"        });\r",
									"}\r",
									"catch (e) {}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "Set parameters for newly created host group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
									"\r",
									"if (parameters && parameters.length > 0) {\r",
									"    postman.setNextRequest(\"Set parameters for newly created host group\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"urrent_parameter\");\r",
									"    pm.collectionVariables.unset(\"current_value\");\r",
									"    pm.collectionVariables.unset(\"list_of_parameters\");\r",
									"    pm.collectionVariables.unset(\"list_of_values\");\r",
									"    postman.setNextRequest(\"List all host groups with updated parameters\");\r",
									"}\r",
									"\r",
									"pm.test(\"Parameter \" + pm.collectionVariables.get(\"current_parameter\") + \" was updated.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
									"let values = pm.collectionVariables.get(\"list_of_values\");\r",
									"\r",
									"if (!parameters || parameters.length == 0) {\r",
									"    parameters = [\"alias\", \"comment\", \"activate\", \"notes\", \"notes_url\", \"action_url\", \"icon_image\", \"map_icon_image\"];\r",
									"    values = [\"my_new_hg_alias\",\"my_comment\", \"1\", \"my_notes\",\"my_note_url\",\"my_action_url\",\"ppm/applications-monitoring-centreon-poller-centreon-128-2.png\",\"ppm/applications-monitoring-centreon-poller-centreon-128-2.png\"];\r",
									"}\r",
									"\r",
									"let current_parameter = parameters.shift();\r",
									"pm.collectionVariables.set(\"current_parameter\", current_parameter);\r",
									"pm.collectionVariables.set(\"list_of_parameters\", parameters);\r",
									"let current_value = values.shift();\r",
									"pm.collectionVariables.set(\"current_value\", current_value);\r",
									"pm.collectionVariables.set(\"list_of_values\", values);\r",
									"\r",
									"pm.collectionVariables.set(current_parameter, current_value);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"setparam\",\n  \"object\": \"hg\",\n  \"values\": \"{{host_group_name}};{{current_parameter}};{{current_value}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List all host groups with updated parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"try {\r",
									"    tests[\"Body contains list of host categories\"] = responseJson;\r",
									"    var i = 0;\r",
									"        while (i < responseJson.meta.total) {\r",
									"        if (pm.collectionVariables.get(\"host_group_name\") == responseJson.result[i].name)\r",
									"        {\r",
									"            if(pm.test(\"Body contains added host group's newly set parameters\", function() {\r",
									"                pm.expect(pm.collectionVariables.get(\"alias\")).to.eql(responseJson.result[i].alias);    \r",
									"                pm.expect(pm.collectionVariables.get(\"notes\")).to.eql(responseJson.result[i].notes);\r",
									"                pm.expect(pm.collectionVariables.get(\"notes_url\")).to.eql(responseJson.result[i].notes_url);\r",
									"                pm.expect(pm.collectionVariables.get(\"action_url\")).to.eql(responseJson.result[i].action_url);\r",
									"                pm.expect(pm.collectionVariables.get(\"comment\")).to.eql(responseJson.result[i].comment);\r",
									"                pm.expect(responseJson.result[i].is_activated).to.eql(true);\r",
									"                pm.expect(responseJson.result[i].icon.path).to.include(pm.collectionVariables.get(\"icon_image\"));\r",
									"                pm.expect(responseJson.result[i].icon_map.path).to.include(pm.collectionVariables.get(\"map_icon_image\"));;                           \r",
									"                })) {                    \r",
									"                    pm.collectionVariables.set(\"host_group_alias\", responseJson.result[i].alias);\r",
									"                    pm.collectionVariables.unset(\"alias\");\r",
									"                    pm.collectionVariables.unset(\"comment\");\r",
									"                    pm.collectionVariables.unset(\"activate\");\r",
									"                    pm.collectionVariables.unset(\"notes\");\r",
									"                    pm.collectionVariables.unset(\"notes_url\");\r",
									"                    pm.collectionVariables.unset(\"action_url\");\r",
									"                    pm.collectionVariables.unset(\"icon_image\");\r",
									"                    pm.collectionVariables.unset(\"map_icon_image\");\r",
									"                }\r",
									"            break;\r",
									"        }\r",
									"        i++;\r",
									"    }\r",
									"    if (i == responseJson.meta.total)\r",
									"        pm.test(\"host_group_name was found\", function() {\r",
									"            false;\r",
									"        });\r",
									"}\r",
									"catch (e) {}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "Add duplicate host group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Displayed error message is the one that's expected\", function() {\r",
									"    pm.expect(pm.response.text()).to.include(\"Object already exists\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"host_group_name\", \"my_hg_name\");\r",
									"pm.collectionVariables.set(\"host_group_alias\", \"my_hg_alias\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \"{{host_group_name}};{{host_group_alias}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List all host groups after duplicate host group creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if(!pm.test(\"Another host group has not been added.\", function() {\r",
									"    pm.expect(pm.collectionVariables.get(\"count_host_group\")).to.eql(responseJson.meta.total)\r",
									"})) {\r",
									"    postman.setNextRequest(\"Delete duplicate host group.\");\r",
									"} else {\r",
									"    postman.setNextRequest(\"Add host group without a name\");\r",
									"}\r",
									"\r",
									"try {\r",
									"    tests[\"Body contains list of host categories\"] = responseJson;\r",
									"    var i = 0;\r",
									"        while (i < responseJson.meta.total) {\r",
									"        if (pm.collectionVariables.get(\"host_group_name\") == responseJson.result[i].name)\r",
									"        {\r",
									"            pm.test(\"Body contains added host group's name\", function() {\r",
									"                pm.expect(pm.collectionVariables.get(\"host_group_name\")).to.eql(responseJson.result[i].name);\r",
									"            });\r",
									"            pm.test(\"Body contains added host group's alias\", function() {\r",
									"                pm.expect(pm.collectionVariables.get(\"host_group_alias\")).to.eql(responseJson.result[i].alias);\r",
									"            });\r",
									"            break;\r",
									"        }\r",
									"        i++;\r",
									"    }\r",
									"    if (i == responseJson.meta.total)\r",
									"        pm.test(\"host_group_name was found\", function() {\r",
									"            false;\r",
									"        });\r",
									"}\r",
									"catch (e) {}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "Add host group without a name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Nameless host has not been created.\", function() {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"host_group_name\", \"my_hg_name\");\r",
									"pm.collectionVariables.set(\"host_group_alias\", \"my_hg_alias\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \";{{host_group_alias}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List all host groups after nameless host group creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if(!pm.test(\"Another host group has not been added.\", function() {\r",
									"    pm.expect(pm.collectionVariables.get(\"count_host_group\")).to.eql(responseJson.meta.total)\r",
									"})) {\r",
									"    postman.setNextRequest(\"Delete nameless host group\");\r",
									"} else {\r",
									"    postman.setNextRequest(\"List all hosts before host creation\");\r",
									"}\r",
									"\r",
									"try {\r",
									"    tests[\"Body contains list of host categories\"] = responseJson;\r",
									"    var i = 0;\r",
									"        while (i < responseJson.meta.total) {\r",
									"        if (pm.collectionVariables.get(\"host_group_name\") == responseJson.result[i].name)\r",
									"        {\r",
									"            pm.test(\"Body contains added host group's name\", function() {\r",
									"                pm.expect(pm.collectionVariables.get(\"host_group_name\")).to.eql(responseJson.result[i].name);\r",
									"            });\r",
									"            pm.test(\"Body contains added host group's alias\", function() {\r",
									"                pm.expect(pm.collectionVariables.get(\"host_group_alias\")).to.eql(responseJson.result[i].alias);\r",
									"            });\r",
									"            break;\r",
									"        }\r",
									"        i++;\r",
									"    }\r",
									"    if (i == responseJson.meta.total)\r",
									"        pm.test(\"host_group_name was found\", function() {\r",
									"            false;\r",
									"        });\r",
									"}\r",
									"catch (e) {}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "Delete nameless host group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hg\",\n  \"values\": \"\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List all host groups after nameless host group deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if(pm.test(\"The nameless host group has been deleted.\", function() {\r",
									"    pm.expect(pm.collectionVariables.get(\"count_host_group\")).to.eql(responseJson.meta.total);\r",
									"})) {\r",
									"    postman.setNextRequest(\"List all hosts before host creation\");\r",
									"} else {    \r",
									"    postman.setNextRequest(\"Delete nameless host group\");\r",
									"}\r",
									"\r",
									"try {\r",
									"    tests[\"Body contains list of host categories\"] = responseJson;\r",
									"    var i = 0;\r",
									"        while (i < responseJson.meta.total) {\r",
									"        if (pm.collectionVariables.get(\"host_group_name\") == responseJson.result[i].name)\r",
									"        {\r",
									"            pm.test(\"Body contains added host group's name\", function() {\r",
									"                pm.expect(pm.collectionVariables.get(\"host_group_name\")).to.eql(responseJson.result[i].name);\r",
									"            });\r",
									"            pm.test(\"Body contains added host group's alias\", function() {\r",
									"                pm.expect(pm.collectionVariables.get(\"host_group_alias\")).to.eql(responseJson.result[i].alias);\r",
									"            });\r",
									"            break;\r",
									"        }\r",
									"        i++;\r",
									"    }\r",
									"    if (i == responseJson.meta.total)\r",
									"        pm.test(\"host_group_name was found\", function() {\r",
									"            false;\r",
									"        });\r",
									"}\r",
									"catch (e) {}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"groups"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "List all hosts before host creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.collectionVariables.set(\"number_of_hosts_before_creation\", responseJson.meta.total);\r",
									"pm.collectionVariables.set(\"hosts_created\", 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts?limit=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts"
							],
							"query": [
								{
									"key": "limit",
									"value": "20",
									"description": "Number of displayed items per page"
								},
								{
									"key": "page",
									"value": "",
									"description": "Number of the requested page",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
									"disabled": true
								}
							]
						},
						"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "show_service",
											"value": "true"
										},
										{
											"key": "search",
											"value": "cillum quis commodo"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "page",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "show_service",
											"value": "true"
										},
										{
											"key": "search",
											"value": "cillum quis commodo"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "page",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "show_service",
											"value": "true"
										},
										{
											"key": "search",
											"value": "cillum quis commodo"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "page",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "Add hosts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const hosts = pm.collectionVariables.get(\"host_list\");\r",
									"\r",
									"if (hosts && hosts.length > 0) {\r",
									"    postman.setNextRequest(\"Add hosts\");\r",
									"} else {\r",
									"    postman.setNextRequest(\"Export configuration\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let hosts = pm.collectionVariables.get(\"host_list\");\r",
									"let ip_addresses = pm.collectionVariables.get(\"ip_addr_list\");\r",
									"let host_groups = pm.collectionVariables.get(\"host_group_list\");\r",
									"\r",
									"if(!hosts || hosts.length == 0) {\r",
									"    hosts = [\"host_name_0\",\"host_name_1\",\"host_name_2\",\"host_name_3\",\"host_name_4\"];\r",
									"    hosts_to_be_found = [\"host_name_0\",\"host_name_1\",\"host_name_2\",\"host_name_3\",\"host_name_4\"];\r",
									"    pm.collectionVariables.set(\"hosts_to_be_found\", hosts_to_be_found);\r",
									"    host_groups = [\"my_hg_name\", \"my_hg_name\", \"my_hg_name\", \"my_hg_name\", \"\"];\r",
									"    ip_addresses = [\"127.0.0.1\", \"127.0.0.2\", \"127.0.0.3\", \"127.0.0.4\", \"127.0.0.5\"];\r",
									"}\r",
									"\r",
									"let currentHost = hosts.shift();\r",
									"pm.collectionVariables.set(\"currentHost\", currentHost);\r",
									"pm.collectionVariables.set(\"host_list\", hosts);\r",
									"\r",
									"let currentIpAddr = ip_addresses.shift();\r",
									"pm.collectionVariables.set(\"currentIpAddr\", currentIpAddr);\r",
									"pm.collectionVariables.set(\"ip_addr_list\", ip_addresses);\r",
									"\r",
									"let currentHostGroup = host_groups.shift();\r",
									"pm.collectionVariables.set(\"currentHostGroup\", currentHostGroup);\r",
									"pm.collectionVariables.set(\"host_group_list\", host_groups);\r",
									"\r",
									"let hosts_created = pm.collectionVariables.get(\"hosts_created\");\r",
									"hosts_created++;\r",
									"pm.collectionVariables.set(\"hosts_created\", hosts_created);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}};{{currentHost}};{{currentIpAddr}};generic-active-host-custom;central;{{currentHostGroup}};\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Export configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function(){}, [2000]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List all hosts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The correct number of hosts has been added.\", function() {\r",
									"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"number_of_hosts_before_creation\") + pm.collectionVariables.get(\"hosts_created\"));\r",
									"});\r",
									"\r",
									"hosts_to_be_found = pm.collectionVariables.get(\"hosts_to_be_found\");\r",
									"var i = 0, j, hosts_found = 0;\r",
									"while (i < responseJson.meta.total) {\r",
									"    j = 0;\r",
									"    while(j < hosts_to_be_found.length) {\r",
									"        if(responseJson.result[i].name == hosts_to_be_found[j]) {\r",
									"            hosts_found++;\r",
									"            if(responseJson.result[i].name = \"host_name_4\") {\r",
									"                pm.collectionVariables.set(\"host_to_update\", responseJson.result[i].name)\r",
									"            }\r",
									"        }\r",
									"    j++;\r",
									"    }\r",
									"i++;\r",
									"}\r",
									"\r",
									"pm.test(\"All newly created hosts' names have been found.\", function() {\r",
									"    pm.expect(hosts_to_be_found.length).to.eql(hosts_found);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts?limit=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts"
							],
							"query": [
								{
									"key": "limit",
									"value": "20",
									"description": "Number of displayed items per page"
								},
								{
									"key": "page",
									"value": "",
									"description": "Number of the requested page",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
									"disabled": true
								}
							]
						},
						"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "show_service",
											"value": "true"
										},
										{
											"key": "search",
											"value": "cillum quis commodo"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "page",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "show_service",
											"value": "true"
										},
										{
											"key": "search",
											"value": "cillum quis commodo"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "page",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "show_service",
											"value": "true"
										},
										{
											"key": "search",
											"value": "cillum quis commodo"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "page",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "Set parameters for a specific newly created host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
									"\r",
									"if (parameters && parameters.length > 0) {\r",
									"    postman.setNextRequest(\"Set parameters for newly created host group\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"urrent_parameter\");\r",
									"    pm.collectionVariables.unset(\"current_value\");\r",
									"    pm.collectionVariables.unset(\"list_of_parameters\");\r",
									"    pm.collectionVariables.unset(\"list_of_values\");\r",
									"    postman.setNextRequest(\"List all host groups with updated parameters\");\r",
									"}\r",
									"\r",
									"pm.test(\"Parameter \" + pm.collectionVariables.get(\"current_parameter\") + \" was updated.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
									"let values = pm.collectionVariables.get(\"list_of_values\");\r",
									"\r",
									"if (!parameters || parameters.length == 0) {\r",
									"    parameters = [\"name\"];\r",
									"    values = [\"host_to_modify\"];\r",
									"}\r",
									"\r",
									"let current_parameter = parameters.shift();\r",
									"pm.collectionVariables.set(\"current_parameter\", current_parameter);\r",
									"pm.collectionVariables.set(\"list_of_parameters\", parameters);\r",
									"let current_value = values.shift();\r",
									"pm.collectionVariables.set(\"current_value\", current_value);\r",
									"pm.collectionVariables.set(\"list_of_values\", values);\r",
									"\r",
									"pm.collectionVariables.set(current_parameter, current_value);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"host\",\n  \"values\": \"{{host_to_update}};{{current_parameter}};{{current_value}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "in",
				"value": "header",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "protocol",
			"value": "http",
			"type": "any"
		},
		{
			"key": "server",
			"value": "",
			"type": "any"
		},
		{
			"key": "port",
			"value": "80",
			"type": "any"
		},
		{
			"key": "version",
			"value": "v22.04",
			"type": "any"
		},
		{
			"key": "baseUrl",
			"value": "{{protocol}}://{{server}}:{{port}}/centreon/api/{{version}}",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "api_username",
			"value": "",
			"type": "string"
		},
		{
			"key": "api_password",
			"value": "",
			"type": "string"
		},
		{
			"key": "user",
			"value": ""
		},
		{
			"key": "host_group_name",
			"value": ""
		},
		{
			"key": "host_group_alias",
			"value": ""
		},
		{
			"key": "count_host_group",
			"value": ""
		},
		{
			"key": "current_parameter",
			"value": ""
		},
		{
			"key": "number_of_hosts_before_creation",
			"value": ""
		},
		{
			"key": "hosts_created",
			"value": ""
		},
		{
			"key": "hosts_to_be_found",
			"value": ""
		},
		{
			"key": "currentHost",
			"value": ""
		},
		{
			"key": "host_list",
			"value": ""
		},
		{
			"key": "currentIpAddr",
			"value": ""
		},
		{
			"key": "ip_addr_list",
			"value": ""
		},
		{
			"key": "currentHostGroup",
			"value": ""
		},
		{
			"key": "host_group_list",
			"value": ""
		},
		{
			"key": "host_to_update_id",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "host_to_update",
			"value": ""
		}
	]
}